{'/System/Library/Frameworks/LocalAuthentication.framework/Support/coreauthd': {'mach-ports': ['com.apple.CoreAuthentication.daemon', 'com.apple.CoreAuthentication.daemon.libxpc']}, '/usr/sbin/notifyd': {'mach-ports': ['com.apple.system.notification_center']}, '/usr/libexec/amfid': {'mach-ports': ['com.apple.MobileFileIntegrity']}, '/System/Library/PrivateFrameworks/AppStoreDaemon.framework/appstored.bundle/appstored': {'protocols': {'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'ASDRequestService': ['- (void)submitRequest:(ASDRequest *)arg1 delegate:(id <ASDRequestDelegate>)arg2 withReplyHandler:(void (^)(id <ASDRequestProxy>, NSError *))arg3;', '- (void)cancelAllRequestsWithErrorHandler:(void (^)(NSError *))arg1;']}, 'mach-ports': ['com.apple.ondemandd.client']}, '/System/Library/PrivateFrameworks/CryptoTokenKit.framework/ctkd': {'protocols': {'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'TKProtocolSlotRegistry': ['- (void)addSlotWithEndpoint:(NSXPCListenerEndpoint *)arg1 name:(NSString *)arg2 type:(NSString *)arg3 forProcesses:(NSArray *)arg4 reply:(void (^)(void))arg5;'], 'TKProtocolSlotClient': ['- (void)reportChangesForSlotType:(NSString *)arg1 reply:(void (^)(void))arg2;'], 'TKProtocolSlotClientNotification': ['- (void)setSlotWithName:(NSString *)arg1 endpoint:(NSXPCListenerEndpoint *)arg2 type:(NSString *)arg3 reply:(void (^)(void))arg4;'], 'TKProtocolTokenWatcherClient': ['- (void)addWatcherWithEndpoint:(NSXPCListenerEndpoint *)arg1 reply:(void (^)(NSArray *))arg2;']}, 'mach-ports': ['com.apple.ctkd.token-client']}, '/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter': {'protocols': {'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'CTCarrierSpaceServiceInterface': ['- (void)refreshAppsInfo:(void (^)(NSError *))arg1;', '- (void)refreshPlansInfo:(void (^)(NSError *))arg1;', '- (void)refreshUsageInfo:(void (^)(NSError *))arg1;', '- (void)userDidAcceptPlanTerms:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)authenticationDidFail:(NSError *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)authenticationDidComplete:(CTCarrierSpaceAuthInfo *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setUserInAuthFlow:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)testMode:(_Bool)arg1 config:(NSDictionary *)arg2 completion:(void (^)(NSError *))arg3;', '- (void)ping:(void (^)(NSError *))arg1;', '- (void)fetchDataPlanMetrics:(void (^)(CTCarrierSpaceDataPlanMetrics *, NSError *))arg1;', '- (void)purchasePlan:(CTCarrierSpacePlanGroupOptionInfo *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)refreshAllInfo:(void (^)(NSError *))arg1;', '- (void)fetchAppsInfo:(_Bool)arg1 completion:(void (^)(CTCarrierSpaceAppsInfo *, NSError *))arg2;', '- (void)fetchPlansInfo:(_Bool)arg1 completion:(void (^)(CTCarrierSpacePlansInfo *, NSError *))arg2;', '- (void)fetchUsageInfo:(_Bool)arg1 completion:(void (^)(CTCarrierSpaceUsageInfo *, NSError *))arg2;', '- (void)setUserConsent:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)getUserConsentFlowInfo:(void (^)(CTCarrierSpaceUserConsentFlowInfo *, NSError *))arg1;', '- (void)getCapabilities:(void (^)(CTCarrierSpaceCapabilities *, NSError *))arg1;'], 'NSXPCConnectionDelegate': ['- (void)connection:(NSXPCConnection *)arg1 handleInvocation:(NSInvocation *)arg2 isReply:(_Bool)arg3;', '- (id <NSSecureCoding>)replacementObjectForXPCConnection:(NSXPCConnection *)arg1 encoder:(NSXPCCoder *)arg2 object:(id)arg3;'], 'CTCellularPlanClient': ['- (void)setActivePlan:(NSData *)arg1 completion:(void (^)(_Bool, NSError *))arg2;', '- (void)shouldShowAddNewRemotePlan:(void (^)(_Bool))arg1;', '- (void)getRemoteInfo:(void (^)(NSDictionary *, NSError *))arg1;', '- (void)setAutoPlanSelection:(_Bool)arg1;', '- (void)getAutoPlanSelectionWithCompletion:(void (^)(_Bool))arg1;', '- (void)deleteAllRemoteProfiles;', '- (void)deleteRemoteProfile:(NSString *)arg1;', '- (void)selectRemoteProfile:(NSString *)arg1;', '- (void)fetchRemoteProfiles:(NSString *)arg1;', '- (void)userDidProvideConsentResponse:(_Bool)arg1 iccid:(NSString *)arg2 completion:(void (^)(_Bool, NSError *))arg3;', '- (void)eraseAllRemotePlansWithCompletion:(void (^)(_Bool, NSError *))arg1;', '- (void)remotePlansSignupParamsForCsn:(NSData *)arg1 completion:(void (^)(NSDictionary *))arg2;', '- (void)remotePlanLaunchInfoForCsn:(NSData *)arg1 completion:(void (^)(NSString *, NSDictionary *, NSError *))arg2;', '- (void)didCancelRemotePlan;', '- (void)didPurchaseRemotePlanForEid:(NSString *)arg1 imei:(NSString *)arg2 meid:(NSString *)arg3 iccid:(NSString *)arg4 alternateSmdpFqdn:(NSString *)arg5 completion:(void (^)(_Bool))arg6;', '- (void)didDeleteRemotePlanItem:(CTCellularPlanItem *)arg1 completion:(void (^)(_Bool, NSError *))arg2;', '- (void)didSelectRemotePlanItem:(CTCellularPlanItem *)arg1 completion:(void (^)(_Bool, NSError *))arg2;', '- (void)remotePlanItemsWithUpdateFetch:(_Bool)arg1 completion:(void (^)(NSArray *, NSError *))arg2;', '- (void)manageAccountForRemotePlan:(CTCellularPlanItem *)arg1 completion:(void (^)(_Bool, NSError *))arg2;', '- (void)addNewRemotePlanWithAddress:(NSString *)arg1 matchingId:(NSString *)arg2 oid:(NSString *)arg3 confirmationCode:(NSString *)arg4 isPairing:(_Bool)arg5 userConsent:(long long)arg6 completion:(void (^)(NSError *))arg7;', '- (void)addNewRemotePlanWithCardData:(NSString *)arg1 confirmationCode:(NSString *)arg2 isPairing:(_Bool)arg3 userConsent:(long long)arg4 completion:(void (^)(NSError *))arg5;', '- (void)addNewRemotePlan:(_Bool)arg1 userConsent:(long long)arg2 completion:(void (^)(NSError *))arg3;', '- (void)finishRemoteProvisioningWithCompletion:(void (^)(_Bool))arg1;', '- (void)startRemoteProvisioningWithCompletion:(void (^)(_Bool))arg1;', '- (void)shouldShowAddNewRemotePlanWithFlowType:(void (^)(_Bool, unsigned long long, NSError *))arg1;', '- (void)isRemotePlanCapable:(void (^)(_Bool))arg1;', '- (void)launchDataActivationNextWithUrl:(NSString *)arg1;', '- (void)updatePlansDatabase;', '- (void)expirePlan;', '- (void)launchSequoia;', '- (void)setLatitude:(NSNumber *)arg1 andLongitude:(NSNumber *)arg2;', '- (void)latitudeLongitudeOverride:(void (^)(double, double))arg1;', '- (void)setMcc:(long long)arg1 andMnc:(long long)arg2;', '- (void)mccMncOverride:(void (^)(long long, long long))arg1;', '- (void)setSelectedProxy:(long long)arg1;', '- (void)getSelectedProxy:(void (^)(long long))arg1;', '- (void)setSelectedEnv:(long long)arg1;', '- (void)getSelectedEnv:(void (^)(long long))arg1;', '- (void)setESimServerURL:(NSString *)arg1;', '- (void)getESimServerURL:(void (^)(NSString *))arg1;', '- (void)setIMEIPrefix:(NSString *)arg1;', '- (void)getIMEIPrefix:(void (^)(NSString *))arg1;', '- (void)getCurrentPlanType:(void (^)(long long))arg1;', '- (void)openInternalUrlId:(long long)arg1;', '- (void)getDeviceInfo:(void (^)(NSDictionary *))arg1;', '- (void)retrieveRequestSettings:(void (^)(NSDictionary *, NSDictionary *, NSDictionary *))arg1;', '- (void)fetchNewProfilesWithCompletion:(void (^)(_Bool, NSError *))arg1 additionalParameters:(NSDictionary *)arg2;', '- (void)registerHasNewProfileCompletion:(void (^)(_Bool, _Bool))arg1;', '- (void)setUserInPurchaseFlow:(_Bool)arg1;', '- (void)didProvisionEsimWithIccid:(NSString *)arg1;', '- (void)didPurchasePlanWithIccid:(NSString *)arg1 downloadProfile:(_Bool)arg2;', '- (void)remoteSignIdMapForSessionId:(NSString *)arg1 locationRequired:(_Bool)arg2 withCompletion:(void (^)(NSString *, NSError *))arg3;', '- (void)signIdMapForSessionId:(NSString *)arg1 locationRequired:(_Bool)arg2 withCompletion:(void (^)(NSString *, NSError *))arg3 latitude:(NSNumber *)arg4 longitude:(NSNumber *)arg5;', '- (void)manageAccountForPlan:(CTCellularPlanItem *)arg1 completion:(void (^)(_Bool, NSError *))arg2;', '- (void)didSelectPlanItem:(CTCellularPlanItem *)arg1 completion:(void (^)(_Bool, NSError *))arg2;', '- (void)willDisplayPlanItems;', '- (void)planItemsWithCompletion:(void (^)(NSArray *, NSError *))arg1;', '- (void)shouldShowPlanList:(void (^)(_Bool))arg1;', '- (void)isAddButtonEnabled:(void (^)(_Bool))arg1;', '- (void)triggerAddNewDataPlan:(void (^)(NSError *))arg1;', '- (void)isRoamingPlanSupportAvailable:(void (^)(_Bool))arg1;', '- (void)isMultipleDataPlanSupportAvailable:(void (^)(_Bool))arg1;', '- (void)isNewDataPlanCapable:(void (^)(_Bool))arg1;', '- (void)ping;'], 'CTCarrierSpaceClientProxyDelegate': ['- (void)proxyDidBecomeInvalidated:(CTCarrierSpaceClientProxy *)arg1;']}, 'mach-ports': ['com.apple.commcenter.cupolicy.xpc', 'com.apple.commcenter.xpc']}, '/System/Library/PrivateFrameworks/IMAVCore.framework/imavagent.app/imavagent': {'mach-ports': ['com.apple.imavagent.embedded.auth']}, '/System/Library/PrivateFrameworks/WirelessDiagnostics.framework/Support/awdd': {'mach-ports': ['com.apple.awdd']}, '/System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted': {'mach-ports': ['com.apple.mediaremoted.xpc']}, '/usr/libexec/pkd': {'mach-ports': ['com.apple.pluginkit.pkd']}, '/System/Library/PrivateFrameworks/AssistantServices.framework/assistantd': {'protocols': {'AFAnalyticsObservationService': ['- (oneway void)flushWithCompletion:(void (^)(void))arg1;', '- (oneway void)observeWithCompletion:(void (^)(void))arg1;'], 'AFSettingsService': ['- (oneway void)getDevicesWithAvailablePHSAssetsForLanguage:(NSString *)arg1 completion:(void (^)(NSArray *))arg2;', '- (oneway void)disableAndDeleteCloudSyncWithCompletion:(void (^)(NSError *))arg1;', '- (oneway void)fetchExperimentContextWithCompletion:(void (^)(AFExperimentContext *, NSError *))arg1;', '- (oneway void)fetchExperimentConfigurationsWithCompletion:(void (^)(NSArray *, NSError *))arg1;', '- (oneway void)sendMetricsToServerWithCompletion:(void (^)(NSError *))arg1;', '- (oneway void)resetAnalyticsStoreWithCompletion:(void (^)(NSError *))arg1;', '- (oneway void)purgeAnalyticsStoreWithCompletion:(void (^)(NSError *))arg1;', '- (oneway void)fetchEventRecordsFromAnalyticsStoreAtPath:(NSString *)arg1 completion:(void (^)(NSArray *, NSError *))arg2;', '- (oneway void)setDESPolicyCDNOverride:(NSString *)arg1 completion:(void (^)(NSError *))arg2;', '- (oneway void)disableDESWithCompletion:(void (^)(NSError *))arg1;', '- (oneway void)setDESLotteryWinOverrideEnabled:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (oneway void)setDESRecordingAlwaysIsEnabled:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (oneway void)runLiveAdaptationRecipeEvaluationWithBaseURL:(NSURL *)arg1 completion:(void (^)(NSError *))arg2;', '- (oneway void)runAdaptationRecipeEvaluation:(NSDictionary *)arg1 language:(NSString *)arg2 completion:(void (^)(NSArray *, NSArray *))arg3;', '- (oneway void)stopAllAudioPlaybackRequests:(_Bool)arg1;', '- (oneway void)stopAudioPlaybackRequest:(AFAudioPlaybackRequest *)arg1 immediately:(_Bool)arg2;', '- (oneway void)startAudioPlaybackRequest:(AFAudioPlaybackRequest *)arg1 completion:(void (^)(NSError *))arg2;', '- (oneway void)getPeerIdentifiers:(void (^)(NSArray *))arg1;', '- (oneway void)startRemoteRequest:(AFRequestInfo *)arg1 onPeer:(NSString *)arg2 completion:(void (^)(NSError *))arg3;', '- (oneway void)startUIRequestWithSpeechAudioFileURL:(NSURL *)arg1;', '- (oneway void)startUIRequestWithText:(NSString *)arg1;', '- (oneway void)setOfflineDictationProfileOverridePath:(NSString *)arg1 completion:(void (^)(NSError *))arg2;', '- (oneway void)createOfflineSpeechProfileWithLanguage:(NSString *)arg1 JSONData:(NSData *)arg2 completion:(void (^)(NSData *, NSError *))arg3;', '- (oneway void)updateOfflineSpeechProfileWithLanguage:(NSString *)arg1 completion:(void (^)(NSError *))arg2;', '- (oneway void)getOfflineDictationStatusWithCompletion:(void (^)(NSDictionary *, NSError *))arg1;', '- (oneway void)setLanguage:(NSString *)arg1 withCompletion:(void (^)(void))arg2;', '- (oneway void)setOutputVoice:(AFVoiceInfo *)arg1 withCompletion:(void (^)(void))arg2;', '- (oneway void)getAvailableVoicesIncludingAssetInfo:(_Bool)arg1 completion:(void (^)(NSArray *))arg2;', '- (oneway void)_runServiceMaintenance;', '- (oneway void)_startDeepSyncVerificationForKeys:(NSArray *)arg1;', '- (void)_setSyncVerificationNeededAndFullReportNeeded:(_Bool)arg1 shouldPostNotification:(_Bool)arg2 completion:(void (^)(NSArray *))arg3;', '- (oneway void)_fetchPeerData:(void (^)(void))arg1;', '- (oneway void)_syncDataWithAnchorKeys:(NSArray *)arg1 forceReset:(_Bool)arg2 reason:(NSString *)arg3 reply:(void (^)(NSArray *))arg4;', '- (oneway void)_clearSyncNeededForKey:(NSString *)arg1;', '- (oneway void)_setSyncNeededForReason:(NSString *)arg1;', '- (oneway void)barrierWithReply:(void (^)(void))arg1;', '- (oneway void)_killDaemon;', '- (oneway void)setDictationEnabled:(_Bool)arg1;', '- (oneway void)setAssistantEnabled:(_Bool)arg1;', '- (oneway void)setActiveAccountIdentifier:(NSString *)arg1;', '- (oneway void)deleteAccountWithIdentifier:(NSString *)arg1;', '- (oneway void)saveAccountWithMessageDictionary:(NSDictionary *)arg1 setActive:(_Bool)arg2;', '- (oneway void)retrieveAccountMessageDictionariesWithReply:(void (^)(NSArray *))arg1;', '- (oneway void)fetchSupportedLanguagesWithReply:(void (^)(NSArray *, NSError *))arg1;'], 'CSSpeechControllerDelegate': ['- (void)speechControllerLPCMRecordBufferAvailable:(CSSpeechController *)arg1 buffer:(NSData *)arg2;', '- (void)speechControllerRecordBufferAvailable:(CSSpeechController *)arg1 buffers:(NSArray *)arg2 recordedAt:(unsigned long long)arg3;', '- (void)speechControllerRequestsOperation:(unsigned long long)arg1 forReason:(unsigned long long)arg2;', '- (void)speechControllerEndRecordInterruption:(CSSpeechController *)arg1;', '- (void)speechControllerBeginRecordInterruption:(CSSpeechController *)arg1 withContext:(NSDictionary *)arg2;', '- (void)speechControllerBeginRecordInterruption:(CSSpeechController *)arg1;', '- (void)speechControllerRecordHardwareConfigurationDidChange:(CSSpeechController *)arg1 toConfiguration:(long long)arg2;', '- (void)speechControllerDidDetectEndpoint:(CSSpeechController *)arg1 ofType:(long long)arg2 atTime:(double)arg3;', '- (void)speechControllerDidDetectStartpoint:(CSSpeechController *)arg1;', '- (void)speechControllerDidStopRecording:(CSSpeechController *)arg1 forReason:(long long)arg2;', '- (void)speechControllerDidStartRecording:(CSSpeechController *)arg1 successfully:(_Bool)arg2 error:(NSError *)arg3;', '- (void)speechControllerDidDetectVoiceTriggerTwoShot:(CSSpeechController *)arg1 atTime:(double)arg2;'], 'AFAnalyticsService': ['- (oneway void)stageEvents:(NSArray *)arg1 completion:(void (^)(void))arg2;', '- (oneway void)stageEvents:(NSArray *)arg1;', '- (oneway void)stageEvent:(AFAnalyticsEvent *)arg1;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'ADAudioStateListening': ['- (void)audioStateAnnouncer:(id <ADAudioStateAnnouncing>)arg1 didChangeAudioStateFrom:(AFAudioState *)arg2 to:(AFAudioState *)arg3;'], 'ADCommandCenterRequestDelegate': ['- (void)adRequestEncounteredIntermediateError:(NSError *)arg1;', '- (void)adRequestDidCompleteWithSuccess:(_Bool)arg1 error:(NSError *)arg2;', '- (void)adRequestDidReceiveCommand:(AceObject<SAAceCommand> *)arg1 reply:(void (^)(AceObject<SAAceCommand> *))arg2;', '- (void)adRequestWillReceiveCommand:(AceObject<SAAceCommand> *)arg1;'], 'CSEndpointAnalyzerDelegate': ['- (void)endpointer:(id <CSEndpointAnalyzer>)arg1 didDetectHardEndpointAtTime:(double)arg2 withMetrics:(CSEndpointerMetrics *)arg3;', '- (void)endpointer:(id <CSEndpointAnalyzer>)arg1 didDetectStartpointAtTime:(double)arg2;'], 'ADCommandCenterClient': ['- (void)adAudioPlaybackRequestDidStop:(AFAudioPlaybackRequest *)arg1 error:(NSError *)arg2;', '- (void)adAudioPlaybackRequestDidNotStart:(AFAudioPlaybackRequest *)arg1 error:(NSError *)arg2;', '- (void)adAudioPlaybackRequestDidStart:(AFAudioPlaybackRequest *)arg1;', '- (void)adAudioPlaybackRequestWillStart:(AFAudioPlaybackRequest *)arg1;', '- (void)adStartUIRequestWithText:(NSString *)arg1 completion:(void (^)(_Bool))arg2;', '- (void)adHandleIntent:(INIntent *)arg1 inBackgroundAppWithBundleId:(NSString *)arg2 reply:(void (^)(INIntentResponse *, NSError *))arg3;', '- (void)adExtensionRequestFinishedForApplication:(NSString *)arg1 error:(NSError *)arg2;', '- (void)adExtensionRequestWillStartForApplication:(NSString *)arg1;', '- (void)adWantsToCacheImage:(INImage *)arg1;', '- (void)adQuickStopWasHandledWithActions:(unsigned long long)arg1;', '- (void)adRequestRequestedDismissAssistant;', '- (void)adServerRequestsTTSStateUnmuted:(_Bool)arg1;', '- (void)adInvalidateCurrentUserActivity;', '- (void)adSetUserActivityInfo:(NSDictionary *)arg1 webpageURL:(NSURL *)arg2;', '- (void)adAcousticIDRequestDidFinishSuccessfully:(_Bool)arg1;', '- (void)adMusicWasDetected;', '- (void)adAcousticIDRequestWillStart;', '- (_Bool)adTextToSpeechIsMuted;', '- (void)adGetBulletinContext:(void (^)(NSArray *))arg1;', '- (void)adRequestRequestedOpenURL:(NSURL *)arg1 completion:(void (^)(_Bool))arg2;', '- (void)adRequestRequestedOpenApplicationWithBundleID:(NSString *)arg1 URL:(NSURL *)arg2 completion:(void (^)(_Bool))arg3;'], 'ADHandsFreeStateChangedObserver': ['- (void)adShouldSpeakStateDidChange:(_Bool)arg1;'], 'SiriCoreLocalSpeechRecognizerDelegate': ['- (void)localSpeechRecognizer:(SiriCoreLocalSpeechRecognizer *)arg1 didCompletionRecognitionWithStatistics:(NSDictionary *)arg2 error:(NSError *)arg3;', '- (void)localSpeechRecognizer:(SiriCoreLocalSpeechRecognizer *)arg1 didRecognizePackage:(AFSpeechPackage *)arg2;', '- (void)localSpeechRecognizer:(SiriCoreLocalSpeechRecognizer *)arg1 didRecognizeRawEagerRecognitionCandidate:(AFSpeechRecognition *)arg2;', '- (void)localSpeechRecognizer:(SiriCoreLocalSpeechRecognizer *)arg1 didProcessAudioDuration:(double)arg2;', '- (void)localSpeechRecognizer:(SiriCoreLocalSpeechRecognizer *)arg1 didRecognizeTokens:(NSArray *)arg2;'], 'ADCommandCenterSyncDelegate': ['- (void)adSyncVerificationServerReport:(NSDictionary *)arg1;', '- (void)adSyncVerificationPartialResult:(NSDictionary *)arg1;'], 'ADCommandCenterSpeechDelegate': ['- (_Bool)adWaitingForAudioFile;', '- (void)adSpeechRecordingDidRecognizePhrases:(NSArray *)arg1 sessionUUID:(NSString *)arg2 refId:(NSString *)arg3;', '- (void)adSpeechRecordingDidRecognizeTokens:(NSArray *)arg1 sessionUUID:(NSString *)arg2;', '- (void)adSpeechRecognizedPartialResult:(SASSpeechPartialResult *)arg1 usingSpeechModel:(NSString *)arg2;', '- (void)adSpeechRecognitionDidFail:(NSError *)arg1 sessionUUID:(NSString *)arg2;', '- (void)adSpeechRecognized:(SASSpeechRecognized *)arg1 usingSpeechModel:(NSString *)arg2 sessionUUID:(NSString *)arg3;', '- (void)adSpeechRecordingDidFail:(NSError *)arg1 sessionUUID:(NSString *)arg2;', '- (void)adSpeechRecordingDidCancelWithSessionUUID:(NSString *)arg1;', '- (void)adSpeechRecordingDidEndWithSessionUUID:(NSString *)arg1;', '- (void)adSpeechRecordingDidChangeAVRecordRoute:(NSString *)arg1 sessionUUID:(NSString *)arg2;', '- (void)adSpeechRecordingDidBeginOnAVRecordRoute:(NSString *)arg1 audioSessionID:(unsigned int)arg2 sessionUUID:(NSString *)arg3;', '- (void)adSpeechRecordingWillBeginWithInputAudioPowerXPCWrapper:(AFXPCWrapper *)arg1 sessionUUID:(NSString *)arg2;', '- (void)adSpeechRecordingDidRecognizePhrases:(NSArray *)arg1 utterances:(NSArray *)arg2;', '- (void)adSpeechRecognitionWillBeginRecognitionUpdateForTask:(NSString *)arg1;', '- (void)adSpeechRecognitionDidFinishUpdateWithError:(NSError *)arg1;', '- (void)adSpeechRecordingPerformTwoShotPromptWithType:(long long)arg1 sessionUUID:(NSString *)arg2 completion:(void (^)(double, double, NSError *))arg3;', '- (void)adSpeechRecordingDidDetectStartPointWithSessionUUID:(NSString *)arg1;', '- (void)adSpeechDidFindVoiceSearchFinalResult:(SASVoiceSearchFinalResult *)arg1;', '- (void)adSpeechDidFindVoiceSearchPartialResult:(SASVoiceSearchPartialResult *)arg1;', '- (void)adPronunciationRecognized:(SASPronunciationRecognized *)arg1 usingSpeechModel:(NSString *)arg2 sessionUUID:(NSString *)arg3;', '- (void)adAudioFileFinishedWriting:(NSFileHandle *)arg1 error:(NSError *)arg2 sessionUUID:(NSString *)arg3;', '- (void)adSpeechRecognizedStructuredResult:(SAStructuredDictationResult *)arg1 usingSpeechModel:(NSString *)arg2 sessionUUID:(NSString *)arg3;'], 'ADAcousticFingerprinterDelegate': ['- (void)acousticFingerprinter:(ADAcousticFingerprinter *)arg1 hasFingerprint:(NSData *)arg2 duration:(double)arg3;'], 'PSYSyncCoordinatorDelegate': ['- (void)syncCoordinatorDidReceiveStartSyncCommand:(PSYSyncCoordinator *)arg1;', '- (void)supportsMigrationSync;', '- (void)syncCoordinatorDidChangeSyncRestriction:(PSYSyncCoordinator *)arg1;', '- (void)syncCoordinator:(PSYSyncCoordinator *)arg1 didInvalidateSyncSession:(PSYServiceSyncSession *)arg2;', '- (void)syncCoordinator:(PSYSyncCoordinator *)arg1 beginSyncSession:(PSYServiceSyncSession *)arg2;'], 'AFClientLiteRemoteCommandHandling': ['- (oneway void)handleRemoteCommand:(SABaseCommand *)arg1 isOneWay:(_Bool)arg2 completion:(void (^)(_Bool, NSError *))arg3;'], 'ADSpeechCapturing': ['- (void)enforcePreviousEndpointHint;', '- (void)updateEndpointHintForDuration:(double)arg1 completion:(void (^)(_Bool, NSArray *))arg2;', '- (void)updateServerEndpointFeatures:(CSServerEndpointFeatures *)arg1;', '- (void)playRecordingStartAlert;', '- (void)getLastStartpointTimestampAndCurrentTime:(void (^)(double, double))arg1;', '- (void)setIsDriving:(_Bool)arg1;', '- (void)forceSuccessAudioAlertOnStop;', '- (void)setFingerprintingEnabled:(_Bool)arg1;', '- (void)cancelSpeechCaptureSuppressingAlert:(_Bool)arg1;', '- (void)stopSpeechCaptureForEvent:(long long)arg1 suppressAlert:(_Bool)arg2;', '- (void)setFingerprintWasRecognized;', '- (void)setSpeechWasRecognizedForElapsedTime:(double)arg1 isFinal:(_Bool)arg2;', '- (void)setSpeechRequestOptions:(AFSpeechRequestOptions *)arg1;', '- (void)suspendAutomaticEndpointingInRange:(struct AFTimeRange)arg1;', '- (void)setUseAutomaticEndpointing:(_Bool)arg1;', '- (void)releaseAudioSession;', '- (void)setDelegate:(id <ADSpeechCapturingDelegate>)arg1;', '- (id)initWithQueue:(NSObject<OS_dispatch_queue> *)arg1;', '- (id)init;'], 'AFClientService': ['- (oneway void)_sendFeedbackToAppPreferencesPredictorForMetricsContext:(NSString *)arg1 selectedBundleId:(NSString *)arg2;', '- (oneway void)_refreshAssistantValidation;', '- (oneway void)_startSpeechWithURL:(NSURL *)arg1 isNarrowBand:(_Bool)arg2;', '- (oneway void)_requestBarrierWithReply:(void (^)(void))arg1;', '- (oneway void)_barrierWithReply:(void (^)(void))arg1;', '- (oneway void)_clearAssistantInfoForAccountIdentifier:(NSString *)arg1;', '- (oneway void)_fetchAppContextForApplicationInfo:(AFApplicationInfo *)arg1 reply:(void (^)(NSArray *))arg2;', '- (oneway void)_broadcastCommandDictionary:(NSDictionary *)arg1;', '- (oneway void)_performTaskCommandDictionary:(NSDictionary *)arg1 forBundleIdentifier:(NSString *)arg2 reply:(void (^)(NSDictionary *, NSError *))arg3;', '- (oneway void)_performCommandDictionary:(NSDictionary *)arg1 forBundleIdentifier:(NSString *)arg2 reply:(void (^)(NSDictionary *, NSError *))arg3;', '- (oneway void)_sendLargeData:(NSData *)arg1 reply:(void (^)(NSString *, NSData *))arg2;', '- (oneway void)_pingServiceForIdentifier:(NSString *)arg1 reply:(void (^)(NSDictionary *))arg2;', '- (oneway void)_listInstalledServicesWithReply:(void (^)(NSDictionary *))arg1;', '- (oneway void)adviseSessionArbiterToContinueWithPreviousWinner:(_Bool)arg1;', '- (oneway void)reportIssueForError:(NSError *)arg1 type:(long long)arg2 context:(NSDictionary *)arg3;', '- (oneway void)updateSpeechSynthesisRecord:(AFSpeechSynthesisRecord *)arg1;', '- (oneway void)endUpdateOutputAudioPower;', '- (oneway void)beginUpdateOutputAudioPowerWithReply:(void (^)(AFXPCWrapper *))arg1;', '- (oneway void)stopAllAudioPlaybackRequests:(_Bool)arg1;', '- (oneway void)stopAudioPlaybackRequest:(AFAudioPlaybackRequest *)arg1 immediately:(_Bool)arg2;', '- (oneway void)startAudioPlaybackRequest:(AFAudioPlaybackRequest *)arg1 reply:(void (^)(NSError *))arg2;', '- (oneway void)getSerializedCachedObjectsWithIdentifiers:(NSSet *)arg1 completion:(void (^)(NSDictionary *))arg2;', '- (oneway void)getDeferredObjectsWithIdentifiers:(NSArray *)arg1 completion:(void (^)(NSArray *, NSError *))arg2;', '- (oneway void)recordCancellationMetrics;', '- (oneway void)recordFailureMetricsForError:(NSError *)arg1;', '- (oneway void)recordSuccessMetrics;', '- (oneway void)recordUIMetrics:(AFMetrics *)arg1;', '- (oneway void)recordRequestMetric:(NSString *)arg1 withTimestamp:(double)arg2;', '- (oneway void)telephonyRequestCompleted;', '- (oneway void)prepareForPhoneCall;', '- (oneway void)setAlertContextDirty;', '- (oneway void)setOverriddenApplicationContext:(NSString *)arg1 withContext:(id)arg2;', '- (oneway void)setApplicationContextForApplicationInfos:(NSArray *)arg1 withRefId:(NSString *)arg2;', '- (oneway void)setApplicationContext:(SASetApplicationContext *)arg1;', '- (oneway void)willSetApplicationContextWithRefId:(NSString *)arg1;', '- (oneway void)rollbackClearContext;', '- (oneway void)clearContext;', '- (oneway void)performGenericAceCommand:(NSDictionary *)arg1 interruptOutstandingRequest:(_Bool)arg2 reply:(void (^)(_Bool))arg3;', '- (oneway void)requestStateUpdateWithReply:(void (^)(_Bool, unsigned int))arg1;', '- (oneway void)stopSpeechWithOptions:(AFSpeechRequestOptions *)arg1;', '- (oneway void)rollbackRequest;', '- (oneway void)cancelRequest;', '- (oneway void)updateSpeechOptions:(AFSpeechRequestOptions *)arg1;', '- (oneway void)continuePendingSpeechRequestWithId:(unsigned long long)arg1 fromTimestamp:(double)arg2;', '- (oneway void)startAcousticIDRequestWithOptions:(AFSpeechRequestOptions *)arg1 context:(NSString *)arg2 completion:(void (^)(NSError *))arg3;', '- (oneway void)startSpeechPronunciationRequestWithOptions:(AFSpeechRequestOptions *)arg1 context:(SASPronunciationContext *)arg2 completion:(void (^)(NSError *))arg3;', '- (oneway void)startRecordingForPendingSpeechRequestWithOptions:(AFSpeechRequestOptions *)arg1 requestId:(unsigned long long)arg2 completion:(void (^)(NSError *))arg3;', '- (oneway void)startRequestWithInfo:(AFRequestInfo *)arg1 completion:(void (^)(NSError *))arg2;', '- (oneway void)endSession;', '- (oneway void)didDismissUI;', '- (oneway void)willPresentUIWithReply:(void (^)(void))arg1;', '- (oneway void)setConfiguration:(AFClientConfiguration *)arg1;', '- (oneway void)setCarDNDActive:(_Bool)arg1;', '- (oneway void)setIsStark:(_Bool)arg1;', '- (oneway void)setLockState:(_Bool)arg1 showingLockScreen:(_Bool)arg2;', '- (oneway void)forceAudioSessionInactive;', '- (oneway void)forceAudioSessionActiveWithCompletion:(void (^)(unsigned int, NSError *))arg1;', '- (oneway void)forceAudioSessionActive;', '- (oneway void)boostedPreheatWithStyle:(long long)arg1 completion:(void (^)(void))arg2;', '- (oneway void)preheatWithStyle:(long long)arg1 forOptions:(AFSpeechRequestOptions *)arg2;'], 'AFDictationService': ['- (oneway void)requestOfflineDictationSupportForLanguage:(NSString *)arg1 completion:(void (^)(_Bool, NSError *))arg2;', '- (oneway void)getInstalledOfflineLanguagesWithCompletion:(void (^)(NSArray *))arg1;', '- (oneway void)_sendEngagementFeedback:(long long)arg1 voiceQueryIdentifier:(NSString *)arg2;', '- (oneway void)_startDictationWithURL:(NSURL *)arg1 isNarrowBand:(_Bool)arg2 language:(NSString *)arg3 options:(AFDictationOptions *)arg4;', '- (oneway void)recordFailureMetricsForError:(NSError *)arg1;', '- (oneway void)endSession;', '- (oneway void)preheatWithRecordDeviceIdentifier:(NSString *)arg1;', '- (oneway void)preheat;', '- (oneway void)sendSpeechCorrectionInfo:(AFSpeechCorrectionInfo *)arg1 forCorrectionContext:(NSDictionary *)arg2;', '- (oneway void)updateSpeechOptions:(AFSpeechRequestOptions *)arg1;', '- (oneway void)addRecordedSpeechSampleData:(NSData *)arg1;', '- (oneway void)startRecordedAudioDictationWithOptions:(AFDictationOptions *)arg1 language:(NSString *)arg2 narrowband:(_Bool)arg3;', '- (oneway void)stopSpeechWithOptions:(AFSpeechRequestOptions *)arg1;', '- (oneway void)cancelSpeech;', '- (oneway void)startDictationWithLanguageCode:(NSString *)arg1 options:(AFDictationOptions *)arg2 speechOptions:(AFSpeechRequestOptions *)arg3;', '- (oneway void)startRecordingForPendingDictationWithLanguageCode:(NSString *)arg1 options:(AFDictationOptions *)arg2 speechOptions:(AFSpeechRequestOptions *)arg3 reply:(void (^)(NSXPCListenerEndpoint *))arg4;', '- (oneway void)startRequestActivityWithCompletion:(void (^)(void))arg1;']}, 'mach-ports': ['com.apple.assistant.dictation']}, '/System/Library/PrivateFrameworks/GenerationalStorage.framework/revisiond': {'protocols': {'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;']}, 'mach-ports': ['com.apple.revisiond']}, '/System/Library/PrivateFrameworks/MusicLibrary.framework/Support/medialibraryd': {'protocols': {'ML3MusicLibraryDelegate': ['- (void)library:(ML3MusicLibrary *)arg1 didRollbackDatabaseTransactionWithConnection:(ML3DatabaseConnection *)arg2;', '- (void)library:(ML3MusicLibrary *)arg1 didCommitDatabaseTransactionWithConnection:(ML3DatabaseConnection *)arg2;', '- (void)library:(ML3MusicLibrary *)arg1 didBeginDatabaseTransactionWithConnection:(ML3DatabaseConnection *)arg2;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'MLDDiagnosticCollection': ['- (void)collectDiagnostic:(MLDMutableDiagnostic *)arg1;'], 'MLMediaLibraryServiceProtocol': ['- (void)performMaintenanceTasksForDatabaseAtPath:(NSString *)arg1 withCompletionHandler:(void (^)(_Bool, NSError *))arg2;', '- (void)performRestoreOfLatestBackupForDatabaseAtPath:(NSString *)arg1 withCompletion:(void (^)(_Bool, NSError *))arg2;', '- (void)performBackupOfDatabaseAtPath:(NSString *)arg1 withCompletion:(void (^)(_Bool, NSError *))arg2;', '- (void)updateSpotlightIndexMetadataForItemsWithIdentifiers:(NSArray *)arg1 bundleID:(NSString *)arg2 withCompletion:(void (^)(_Bool, NSError *))arg3;', '- (void)updateSpotlightIndexForBundleID:(NSString *)arg1 withCompletion:(void (^)(_Bool, NSError *))arg2;', '- (void)setDeviceSharedLibraryPath:(NSString *)arg1 withCompletion:(void (^)(_Bool, NSError *))arg2;', '- (void)getDeviceSharedLibraryPath:(void (^)(NSString *))arg1;', '- (void)getLanguageResourcesWithCompletion:(void (^)(ML3LanguageResources *, NSError *))arg1;', '- (void)unlockDatabaseWithCompletion:(void (^)(_Bool, NSError *))arg1;', '- (void)lockDatabaseForReason:(NSString *)arg1 withCompletion:(void (^)(_Bool, NSError *))arg2;', '- (void)cancelImportOperation:(unsigned long long)arg1 completionHandler:(void (^)(_Bool, NSError *))arg2;', '- (void)performImport:(ML3DatabaseImport *)arg1 fromSource:(unsigned long long)arg2 withUUID:(NSUUID *)arg3 completionHandler:(void (^)(_Bool, NSError *, NSData *))arg4;', '- (void)setOptions:(NSDictionary *)arg1 withCompletionHandler:(void (^)(_Bool, NSError *))arg2;', '- (void)performDatabaseOperation:(unsigned long long)arg1 withAttributes:(NSDictionary *)arg2 options:(NSDictionary *)arg3 completionHandler:(void (^)(_Bool, NSError *))arg4;', '- (void)endTransaction:(NSUUID *)arg1 shouldCommit:(_Bool)arg2 withCompletionHandler:(void (^)(_Bool, NSError *))arg3;', '- (void)executeQuery:(NSString *)arg1 withParameters:(NSArray *)arg2 options:(NSDictionary *)arg3 onTransaction:(NSUUID *)arg4 withCompletionHandler:(void (^)(NSData *, NSError *))arg5;', '- (void)executeUpdate:(NSString *)arg1 withParameters:(NSArray *)arg2 onTransaction:(NSUUID *)arg3 withCompletionHandler:(void (^)(_Bool, NSError *))arg4;', '- (void)beginTransactionForDatabaseAtPath:(NSString *)arg1 withPriorityLevel:(unsigned long long)arg2 options:(unsigned long long)arg3 completionHandler:(void (^)(NSUUID *, NSError *))arg4;', '- (void)recreateDatabaseAtPath:(NSString *)arg1 withCompletionHandler:(void (^)(_Bool, NSError *))arg2;', '- (void)performDiagnosticWithCompletionHandler:(void (^)(NSString *, NSError *))arg1;', '- (void)attemptDatabaseFileRecoveryAtPath:(NSString *)arg1 withCompletionHandler:(void (^)(_Bool, NSError *))arg2;', '- (void)validateDatabaseAtPath:(NSString *)arg1 withCompletionHandler:(void (^)(_Bool, NSError *))arg2;'], 'MLDMediaLibraryWriterDelegate': ['- (void)mediaLibraryWriter:(MLDMediaLibraryWriter *)arg1 didDestroyTransaction:(MLDActiveTransaction *)arg2;', '- (void)mediaLibraryWriter:(MLDMediaLibraryWriter *)arg1 terminatedTransaction:(MLDActiveTransaction *)arg2 withError:(NSError *)arg3;'], 'NSXPCConnectionDelegate': ['- (void)connection:(NSXPCConnection *)arg1 handleInvocation:(NSInvocation *)arg2 isReply:(_Bool)arg3;', '- (id <NSSecureCoding>)replacementObjectForXPCConnection:(NSXPCConnection *)arg1 encoder:(NSXPCCoder *)arg2 object:(id)arg3;']}, 'mach-ports': ['com.apple.medialibraryd.xpc']}, '/System/Library/CoreServices/ReportCrash': {'mach-ports': ['com.apple.ReportCrash', 'com.apple.ReportCrash.Jetsam', 'com.apple.ReportCrash.SafetyNet', 'com.apple.ReportCrash.SimulateCrash']}, '/System/Library/PrivateFrameworks/IAP.framework/Support/iapd': {'mach-ports': ['com.apple.iapd', 'com.apple.iapd.xpc']}, '/System/Library/Frameworks/SystemConfiguration.framework/SCHelper': {'mach-ports': ['com.apple.SystemConfiguration.helper']}, '/System/Library/PrivateFrameworks/HomeKitDaemon.framework/Support/homed': {'mach-ports': ['com.apple.homed.xpc']}, '/usr/libexec/webinspectord': {'mach-ports': ['com.apple.webinspector']}, '/usr/libexec/safarifetcherd': {'mach-ports': ['com.apple.safarifetcherd']}, '/System/Library/PrivateFrameworks/SyncedDefaults.framework/Support/syncdefaultsd': {'mach-ports': ['com.apple.syncdefaultsd']}, '/System/Library/PrivateFrameworks/VoiceServices.framework/Support/voiced': {'protocols': {'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'VSSpeechXPCServiceProtocol': ['- (oneway void)getLogToFile:(void (^)(_Bool))arg1;', '- (oneway void)setLogToFile:(_Bool)arg1;', '- (oneway void)getVoiceInfoForLanguageCode:(NSString *)arg1 footprint:(long long)arg2 gender:(long long)arg3 type:(long long)arg4 reply:(void (^)(VSVoiceAsset *))arg5;', '- (oneway void)getVoiceResourceForLanguage:(NSString *)arg1 reply:(void (^)(VSVoiceResourceAsset *))arg2;', '- (oneway void)getAutoDownloadedVoiceAssets:(void (^)(NSArray *))arg1;', '- (oneway void)setAutoDownloadedVoiceAssets:(NSArray *)arg1;', '- (oneway void)getLocalVoiceResourcesReply:(void (^)(NSArray *, NSError *))arg1;', '- (oneway void)getLocalVoicesReply:(void (^)(NSArray *, NSError *))arg1;', '- (oneway void)cleanUnusedAssets:(void (^)(NSError *))arg1;', '- (oneway void)getSpeechIsActiveForConnectionReply:(void (^)(_Bool))arg1;', '- (oneway void)getSpeechIsActiveReply:(void (^)(_Bool))arg1;', '- (oneway void)getFootprintsForVoiceName:(NSString *)arg1 languageCode:(NSString *)arg2 reply:(void (^)(NSArray *))arg3;', '- (oneway void)getVoiceNamesForLanguage:(NSString *)arg1 reply:(void (^)(NSArray *))arg2;', '- (oneway void)stopPresynthesizedAudioRequest;', '- (oneway void)startPresynthesizedAudioRequest:(VSPresynthesizedAudioRequest *)arg1;', '- (oneway void)stopSpeechRequestAtMark:(long long)arg1;', '- (oneway void)continueSpeechRequest;', '- (oneway void)pauseSpeechRequestAtMark:(long long)arg1;', '- (oneway void)startSynthesisRequest:(VSSpeechRequest *)arg1;', '- (oneway void)startSpeechRequest:(VSSpeechRequest *)arg1;', '- (oneway void)prewarmIfNeededWithRequest:(VSSpeechRequest *)arg1;', '- (oneway void)updateWithConnectionIdentifier:(NSString *)arg1;'], 'VSSpeechServiceDelegate': ['- (oneway void)presynthesizedAudioRequestSuccessWithInstrumentMetrics:(VSInstrumentMetrics *)arg1 error:(NSError *)arg2;', '- (oneway void)presynthesizedAudioRequestDidStopAtEnd:(_Bool)arg1 error:(NSError *)arg2;', '- (oneway void)presynthesizedAudioRequestDidStart;', '- (oneway void)synthesisRequestDidFinishWithInstrumentMetrics:(VSInstrumentMetrics *)arg1 error:(NSError *)arg2;', '- (oneway void)speechRequestDidReceiveTimingInfo:(NSArray *)arg1;', '- (oneway void)speechRequestSuccessWithInstrumentMetrics:(VSInstrumentMetrics *)arg1;', '- (oneway void)speechRequestDidStopWithSuccess:(_Bool)arg1 phonemesSpoken:(NSString *)arg2 error:(NSError *)arg3;', '- (oneway void)speechRequestMark:(long long)arg1 didStartForRange:(struct _NSRange)arg2;', '- (oneway void)speechRequestDidContinue;', '- (oneway void)speechRequestDidPause;', '- (oneway void)speechRequestDidStart;']}, 'mach-ports': ['com.apple.voiceservices.keepalive', 'com.apple.voiceservices.tts']}, '/System/Library/Frameworks/GSS.framework/Helpers/GSSCred': {'mach-ports': ['com.apple.GSSCred']}, '/usr/libexec/checkpointd': {'mach-ports': ['com.apple.mobilecheckpoint.checkpointd']}, '/usr/sbin/fairplayd.H2': {'mach-ports': ['com.apple.fairplayd', 'com.apple.fairplayd.versioned']}, '/System/Library/PrivateFrameworks/MediaStream.framework/Support/mstreamd': {'protocols': {'MSPauseManagerDelegate': ['- (void)pauseManagerDidUnpause:(MSPauseManager *)arg1;', '- (void)pauseManagerDidPause:(MSPauseManager *)arg1;'], 'MSPowerBudgetDelegate': ['- (void)MSPowerBudgetGotSignificantEvent:(MSPowerBudget *)arg1;', '- (void)MSPowerBudget:(MSPowerBudget *)arg1 didRequestStorageOfPersistedValues:(NSDictionary *)arg2;', '- (NSDictionary *)MSPowerBudgetDidRequestPersistedValues:(MSPowerBudget *)arg1;'], 'APSConnectionDelegate': ['- (void)connection:(APSConnection *)arg1 didReceivePublicToken:(NSData *)arg2;', '- (void)connectionDidReconnect:(APSConnection *)arg1;', '- (void)connection:(APSConnection *)arg1 didChangeConnectedStatus:(_Bool)arg2;', '- (void)connection:(APSConnection *)arg1 didFailToSendOutgoingMessage:(APSOutgoingMessage *)arg2 error:(NSError *)arg3;', '- (void)connection:(APSConnection *)arg1 didSendOutgoingMessage:(APSOutgoingMessage *)arg2;', '- (void)connection:(APSConnection *)arg1 didReceiveMessageForTopic:(NSString *)arg2 userInfo:(NSDictionary *)arg3;', '- (void)connection:(APSConnection *)arg1 didReceiveIncomingMessage:(APSIncomingMessage *)arg2;', '- (void)connection:(APSConnection *)arg1 didReceiveToken:(NSData *)arg2 forTopic:(NSString *)arg3 identifier:(NSString *)arg4;'], 'MSDaemonProtocols': ['- (void)forgetEverythingForPersonID:(NSString *)arg1;', '- (void)unpauseForUUID:(NSString *)arg1;', '- (void)pauseForUUID:(NSString *)arg1;', '- (void)abortAllActivityForPersonID:(NSString *)arg1;', '- (void)resetServerStateForPersonID:(NSString *)arg1;', '- (void)refreshServerSideConfigurationForPersonID:(NSString *)arg1;', '- (void)serverSideConfigurationForPersonID:(NSString *)arg1 reply:(void (^)(NSDictionary *))arg2;', '- (void)pollForSubscriptionUpdatesTriggeredByPushNotificationForPersonID:(NSString *)arg1;', '- (void)retryOutstandingActivities;', '- (void)pollForSubscriptionUpdatesForPersonID:(NSString *)arg1;', '- (void)deleteAssetCollections:(NSArray *)arg1 personID:(NSString *)arg2;', '- (void)dequeueAssetCollectionWithGUIDs:(NSArray *)arg1 personID:(NSString *)arg2 reply:(void (^)(NSDictionary *))arg3;', '- (void)enqueueAssetCollections:(NSArray *)arg1 personID:(NSString *)arg2 reply:(void (^)(NSDictionary *))arg3;', '- (void)isBusyCompletionBlock:(void (^)(_Bool))arg1;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;']}, 'mach-ports': ['com.apple.mediastream.sharing']}, '/System/Library/CoreServices/VoiceOverTouch.app/scrod': {'mach-ports': ['com.apple.scrod']}, '/System/Library/PrivateFrameworks/CalendarDaemon.framework/Support/calaccessd': {'mach-ports': ['com.apple.calaccessd', 'com.apple.calaccessd.xpc']}, '/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper': {'mach-ports': ['com.apple.commcenter.mobile-helper']}, '/usr/libexec/misd': {'mach-ports': ['com.apple.MobileInternetSharing']}, '/System/Library/PrivateFrameworks/IMCore.framework/imagent.app/imagent': {'mach-ports': ['com.apple.imagent.embedded.auth']}, '/System/Library/CoreServices/VoiceOverTouch.app/vot': {'mach-ports': ['com.apple.VoiceOverTouch', 'com.apple.VoiceOverTouch.xpc']}, '/System/Library/PrivateFrameworks/GeoServices.framework/geod': {'mach-ports': ['com.apple.geod']}, '/System/Library/PrivateFrameworks/CoreRecents.framework/recentsd': {'protocols': {'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;']}, 'mach-ports': ['com.apple.corerecents.recentsd']}, '/usr/libexec/wcd': {'protocols': {'WCXPCPrivateManagerDaemonProtocol': ['- (void)reconnect;', '- (void)fakeIncomingPayloadOnSubService:(NSString *)arg1 ofType:(NSString *)arg2 clientData:(NSData *)arg3 resource:(NSURL *)arg4 resourceSandboxToken:(NSData *)arg5 completionHandler:(void (^)(NSError *))arg6;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'IDSServiceDelegate': ['- (void)service:(IDSService *)arg1 didSwitchActivePairedDevice:(IDSDevice *)arg2 acknowledgementBlock:(void (^)(void))arg3;', '- (void)serviceAllowedTrafficClassifiersDidReset:(IDSService *)arg1;', '- (void)serviceSpaceDidBecomeAvailable:(IDSService *)arg1;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 inviteReceivedForSession:(IDSSession *)arg3 fromID:(NSString *)arg4 withContext:(NSData *)arg5;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 inviteReceivedForSession:(IDSSession *)arg3 fromID:(NSString *)arg4 withOptions:(NSDictionary *)arg5;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 inviteReceivedForSession:(IDSSession *)arg3 fromID:(NSString *)arg4;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 identifier:(NSString *)arg3 hasBeenDeliveredWithContext:(id)arg4;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 identifier:(NSString *)arg3 didSendWithSuccess:(_Bool)arg4 error:(NSError *)arg5 context:(IDSMessageContext *)arg6;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 identifier:(NSString *)arg3 didSendWithSuccess:(_Bool)arg4 error:(NSError *)arg5;', '- (void)service:(IDSService *)arg1 connectedDevicesChanged:(NSArray *)arg2;', '- (void)service:(IDSService *)arg1 nearbyDevicesChanged:(NSArray *)arg2;', '- (void)service:(IDSService *)arg1 devicesChanged:(NSArray *)arg2;', '- (void)service:(IDSService *)arg1 activeAccountsChanged:(NSSet *)arg2;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 incomingResourceAtURL:(NSURL *)arg3 metadata:(NSDictionary *)arg4 fromID:(NSString *)arg5 context:(IDSMessageContext *)arg6;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 incomingResourceAtURL:(NSURL *)arg3 fromID:(NSString *)arg4 context:(IDSMessageContext *)arg5;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 incomingUnhandledProtobuf:(IDSProtobuf *)arg3 fromID:(NSString *)arg4 context:(IDSMessageContext *)arg5;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 incomingData:(NSData *)arg3 fromID:(NSString *)arg4 context:(IDSMessageContext *)arg5;', '- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 incomingMessage:(NSDictionary *)arg3 fromID:(NSString *)arg4 context:(IDSMessageContext *)arg5;'], 'PKComplicationXPCServer': ['- (void)complicationUnregister;', '- (void)complicationRegister;'], 'WCDPKClientDelegate': ['- (void)clientRequestingComplicationUnregister:(WCDPKClient *)arg1;', '- (void)clientRequestingComplicationRegister:(WCDPKClient *)arg1;', '- (void)clientXPCConnectionDidDisconnect:(WCDPKClient *)arg1;'], 'WCXPCManagerDaemonProtocol': ['- (void)acknowledgeUserInfoResultIndexWithIdentifier:(NSString *)arg1 clientPairingID:(NSString *)arg2;', '- (void)acknowledgeUserInfoIndexWithIdentifier:(NSString *)arg1 clientPairingID:(NSString *)arg2;', '- (void)acknowledgeFileResultIndexWithIdentifier:(NSString *)arg1 clientPairingID:(NSString *)arg2;', '- (void)acknowledgeFileIndexWithIdentifier:(NSString *)arg1 clientPairingID:(NSString *)arg2;', '- (void)cancelAllOutstandingMessages;', '- (void)cancelSendWithIdentifier:(NSString *)arg1;', '- (void)transferUserInfo:(WCSessionUserInfoTransfer *)arg1 withURL:(NSURL *)arg2 clientPairingID:(NSString *)arg3 errorHandler:(void (^)(NSError *))arg4;', '- (void)transferFile:(WCSessionFileTransfer *)arg1 sandboxToken:(NSData *)arg2 clientPairingID:(NSString *)arg3 errorHandler:(void (^)(NSError *))arg4;', '- (void)updateApplicationContext:(NSData *)arg1 clientPairingID:(NSString *)arg2 errorHandler:(void (^)(NSError *))arg3;', '- (void)sendMessage:(WCMessage *)arg1 clientPairingID:(NSString *)arg2 acceptanceHandler:(void (^)(_Bool, _Bool))arg3;', '- (void)sessionReadyForInitialStateForClientPairingID:(NSString *)arg1 supportsActiveDeviceSwitch:(_Bool)arg2 withErrorHandler:(void (^)(NSError *))arg3;'], 'APSConnectionDelegate': ['- (void)connection:(APSConnection *)arg1 didReceivePublicToken:(NSData *)arg2;', '- (void)connectionDidReconnect:(APSConnection *)arg1;', '- (void)connection:(APSConnection *)arg1 didChangeConnectedStatus:(_Bool)arg2;', '- (void)connection:(APSConnection *)arg1 didFailToSendOutgoingMessage:(APSOutgoingMessage *)arg2 error:(NSError *)arg3;', '- (void)connection:(APSConnection *)arg1 didSendOutgoingMessage:(APSOutgoingMessage *)arg2;', '- (void)connection:(APSConnection *)arg1 didReceiveMessageForTopic:(NSString *)arg2 userInfo:(NSDictionary *)arg3;', '- (void)connection:(APSConnection *)arg1 didReceiveIncomingMessage:(APSIncomingMessage *)arg2;', '- (void)connection:(APSConnection *)arg1 didReceiveToken:(NSData *)arg2 forTopic:(NSString *)arg3 identifier:(NSString *)arg4;'], 'WCDClientDelegate': ['- (void)clientReachabilityDidChange:(NSObject *)arg1;', '- (void)clientXPCConnectionDidDisconnect:(NSObject *)arg1;'], 'NSXPCConnectionDelegate': ['- (void)connection:(NSXPCConnection *)arg1 handleInvocation:(NSInvocation *)arg2 isReply:(_Bool)arg3;', '- (id <NSSecureCoding>)replacementObjectForXPCConnection:(NSXPCConnection *)arg1 encoder:(NSXPCCoder *)arg2 object:(id)arg3;'], 'WCDSystemObserver': ['- (void)systemObserverProcessStateChangedForBundleID:(NSString *)arg1;', '- (void)systemObserverAppDidTerminateForBundleID:(NSString *)arg1;', '- (void)systemObserverAppDidSuspendForBundleID:(NSString *)arg1;', '- (void)systemObserverWatchAppUIStatesChanged:(NSDictionary *)arg1;', '- (void)systemObserverActiveComplicationsChanged;', '- (void)systemObserverRemainingComplicationUserInfoTransfersReset;', '- (void)systemObserverComplicationsInstalledChanged;', '- (void)systemObserverWatchAppsInstalledChanged;', '- (void)systemObserverInstalledApplicationsChanged;', '- (void)systemObserverRemoteFirstUnlockedChanged;', '- (void)systemObserverPairedListChanged;', '- (void)systemObserverActiveDeviceConnectedChanged;', '- (void)systemObserverActiveDeviceSwitchStarted;', '- (void)systemObserverInitialSetUpComplete;']}, 'mach-ports': ['com.apple.watchconnectivity.complication', 'com.apple.wcd']}, '/usr/libexec/installd': {'protocols': {'MobileInstallerProtocol': ['- (void)dieForTesting;', '- (void)snapshotWKAppInCompanionAppID:(NSString *)arg1 toURL:(NSURL *)arg2 options:(NSDictionary *)arg3 completion:(void (^)(NSDictionary *, NSError *))arg4;', '- (void)getAppMetadataForApp:(NSString *)arg1 completion:(void (^)(MIBundleMetadata *, NSError *))arg2;', '- (void)updatePlaceholderMetadataForApp:(NSString *)arg1 installType:(unsigned long long)arg2 failureReason:(unsigned long long)arg3 underlyingError:(NSError *)arg4 failureSource:(unsigned long long)arg5 completion:(void (^)(NSError *))arg6;', '- (void)updateAppDataProtectionWithOptions:(NSDictionary *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)updateiTunesMetadataForLSWithIdentifier:(NSString *)arg1 options:(NSDictionary *)arg2 plistData:(NSData *)arg3 completion:(void (^)(NSError *))arg4;', '- (void)updateSinfForLSWithIdentifier:(NSString *)arg1 withOptions:(NSDictionary *)arg2 sinfData:(NSData *)arg3 completion:(void (^)(NSDictionary *, NSError *))arg4;', '- (void)checkCapabilities:(NSObject *)arg1 withOptions:(NSDictionary *)arg2 completion:(void (^)(NSDictionary *, NSError *))arg3;', '- (void)listSafeHarborsOfType:(long long)arg1 withOptions:(NSDictionary *)arg2 completion:(void (^)(NSDictionary *, NSError *))arg3;', '- (void)removeSafeHarborForIdentifier:(NSString *)arg1 ofType:(long long)arg2 withOptions:(NSDictionary *)arg3 completion:(void (^)(NSError *))arg4;', '- (void)registerSafeHarborAtPath:(NSString *)arg1 forIdentifier:(NSString *)arg2 ofType:(long long)arg3 withOptions:(NSDictionary *)arg4 completion:(void (^)(NSError *))arg5;', '- (void)processRestoredContainerWithIdentifier:(NSString *)arg1 ofType:(long long)arg2 options:(NSDictionary *)arg3 completion:(void (^)(NSError *))arg4;', '- (void)fetchDiskUsageForIdentifiers:(NSArray *)arg1 withOptions:(NSDictionary *)arg2 completion:(void (^)(NSDictionary *, NSError *))arg3;', '- (void)enumerateInstalledAppsWithOptions:(NSDictionary *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)fetchInstalledAppsWithOptions:(NSDictionary *)arg1 completion:(void (^)(NSDictionary *, NSError *))arg2;', '- (void)fetchInstalledDeveloperAppsWithMountPath:(NSString *)arg1 completion:(void (^)(NSDictionary *, NSError *))arg2;', '- (void)updateSystemAppStateForIdentifier:(NSString *)arg1 appState:(int)arg2 completion:(void (^)(NSError *))arg3;', '- (void)lookupSystemAppStateWithOptions:(NSDictionary *)arg1 completion:(void (^)(NSDictionary *, NSError *))arg2;', '- (void)clearUninstalledIdentifiers:(NSArray *)arg1 withOptions:(NSDictionary *)arg2 completion:(void (^)(NSError *))arg3;', '- (void)lookupUninstalledWithOptions:(NSDictionary *)arg1 completion:(void (^)(NSDictionary *, NSError *))arg2;', '- (void)uninstallIdentifiers:(NSArray *)arg1 withOptions:(NSDictionary *)arg2 completion:(void (^)(NSDictionary *, NSError *))arg3;', '- (void)installURL:(NSURL *)arg1 withOptions:(NSDictionary *)arg2 completion:(void (^)(NSDictionary *, NSError *))arg3;']}, 'mach-ports': ['com.apple.mobile.installd']}, '/usr/libexec/webbookmarksd': {'mach-ports': ['com.apple.WebBookmarks.webbookmarksd']}, '/usr/sbin/bluetoothd': {'mach-ports': ['com.apple.server.bluetooth', 'com.apple.server.bluetooth.le.att.xpc', 'com.apple.server.bluetooth.le.pipe.xpc']}, '/System/Library/PrivateFrameworks/CertUI.framework/certui_relay': {'mach-ports': ['com.apple.certui.relay']}, '/System/Library/CoreServices/AssistiveTouch.app/assistivetouchd': {'mach-ports': ['UIASTNotificationCenter']}, '/System/Library/CoreServices/powerd.bundle/powerd': {'mach-ports': ['com.apple.PowerManagement.control']}, '/System/Library/TextInput/kbd': {'protocols': {'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'TIKeyboardActivityObserving': ['- (void)keyboardActivityDidTransition:(TIKeyboardActivityContext *)arg1;', '- (void)handleMemoryPressureLevel:(unsigned long long)arg1 excessMemoryInBytes:(unsigned long long)arg2;'], 'TIImageCaching': ['- (void)cacheItem:(TIImageCacheItem *)arg1 key:(NSString *)arg2 group:(NSString *)arg3;']}, 'mach-ports': ['com.apple.TextInput', 'com.apple.TextInput.lexicon-server', 'com.apple.TextInput.rdt', 'com.apple.TextInput.shortcuts']}, '/System/Library/PrivateFrameworks/AggregateDictionary.framework/Support/addaily': {'mach-ports': ['com.apple.aggregated']}, '/System/Library/PrivateFrameworks/ManagedConfiguration.framework/Support/mdmd': {'protocols': {'MCMDMXPCProtocol': ['- (void)processDeviceRequest:(NSDictionary *)arg1 completion:(void (^)(NSError *, NSDictionary *))arg2;', '- (void)uprootMDMWithCompletion:(void (^)(NSError *))arg1;', '- (void)migrateMDMWithContext:(int)arg1 completion:(void (^)(NSError *))arg2;', '- (void)retryNotNowWithCompletion:(void (^)(NSError *))arg1;', '- (void)simulatePushIfNetworkTetheredWithCompletion:(void (^)(NSError *))arg1;', '- (void)simulatePushWithCompletion:(void (^)(NSError *))arg1;', '- (void)scheduleTokenUpdateIfNecessaryWithCompletion:(void (^)(NSError *))arg1;', '- (void)scheduleTokenUpdateWithCompletion:(void (^)(NSError *))arg1;', '- (void)notifyNewConfigurationWithCompletion:(void (^)(NSError *))arg1;']}, 'mach-ports': ['com.apple.managedconfiguration.mdmdpush-dev', 'com.apple.managedconfiguration.mdmdpush-prod', 'com.apple.managedconfiguration.mdmdservice']}, '/System/Library/PrivateFrameworks/Search.framework/searchd': {'mach-ports': ['com.apple.spotlight.IndexAgent', 'com.apple.spotlight.SearchAgent']}, '/System/Library/Frameworks/CoreMIDI.framework/MIDIServer': {'mach-ports': ['com.apple.midiserver']}, '/usr/libexec/gamecontrollerd': {'mach-ports': ['com.apple.GameController.gamecontrollerd']}, '/System/Library/Frameworks/AssetsLibrary.framework/Support/assetsd': {'mach-ports': ['com.apple.PersistentURLTranslator.Gatekeeper', 'com.apple.assetsd.changehub', 'com.apple.assetsd.keepDaemonAlive']}, '/usr/sbin/mediaserverd': {'mach-ports': ['com.apple.airplay.sender.xpc', 'com.apple.audio.AURemoteIOServer', 'com.apple.audio.AudioConverterServer', 'com.apple.audio.AudioFileServer', 'com.apple.audio.AudioQueueServer', 'com.apple.audio.AudioSession', 'com.apple.audio.AudioUnitServer', 'com.apple.audio.SystemSoundServer-iOS', 'com.apple.coremedia.admin', 'com.apple.coremedia.capturesession', 'com.apple.coremedia.capturesource', 'com.apple.coremedia.compressionsession', 'com.apple.coremedia.decompressionsession', 'com.apple.coremedia.endpoint.xpc', 'com.apple.coremedia.recorder', 'com.apple.coremedia.remaker', 'com.apple.coremedia.sandboxserver', 'com.apple.coremedia.videocompositor', 'com.apple.coremedia.videoqueue', 'com.apple.fig.movie', 'com.apple.mediaserverd', 'com.apple.videoconference.avconference', 'com.apple.videoconference.camera']}, '/usr/sbin/filecoordinationd': {'mach-ports': ['com.apple.FileCoordination', 'com.apple.ProgressReporting']}, '/usr/libexec/gamed': {'protocols': {'GKPreferencesDelegate': ['- (void)gameCenterDidBecomeRestricted;'], 'GKNATObserverDelegate': ['- (void)triggerInterfaceChange;', '- (void)NATTypeDictionaryUpdated:(NSDictionary *)arg1;', '- (void)NATTypeDidChange:(int)arg1;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'GKLockStatusObserver': ['- (void)lockStatusDidChange;'], '_GKStateMachineDelegate': ['- (NSString *)missingTransitionFromState:(NSString *)arg1 toState:(NSString *)arg2;', '- (void)stateDidChange;', '- (void)stateWillChange;'], 'APSConnectionDelegate': ['- (void)connection:(APSConnection *)arg1 didReceivePublicToken:(NSData *)arg2;', '- (void)connectionDidReconnect:(APSConnection *)arg1;', '- (void)connection:(APSConnection *)arg1 didChangeConnectedStatus:(_Bool)arg2;', '- (void)connection:(APSConnection *)arg1 didFailToSendOutgoingMessage:(APSOutgoingMessage *)arg2 error:(NSError *)arg3;', '- (void)connection:(APSConnection *)arg1 didSendOutgoingMessage:(APSOutgoingMessage *)arg2;', '- (void)connection:(APSConnection *)arg1 didReceiveMessageForTopic:(NSString *)arg2 userInfo:(NSDictionary *)arg3;', '- (void)connection:(APSConnection *)arg1 didReceiveIncomingMessage:(APSIncomingMessage *)arg2;', '- (void)connection:(APSConnection *)arg1 didReceiveToken:(NSData *)arg2 forTopic:(NSString *)arg3 identifier:(NSString *)arg4;'], 'GKClientProtocol': ['- (oneway void)setLogBits:(int)arg1;', '- (oneway void)refreshContentsForDataType:(unsigned int)arg1 userInfo:(NSDictionary *)arg2;', '- (oneway void)setBadgeCount:(unsigned long long)arg1 forType:(unsigned long long)arg2;', '- (oneway void)achievementSelected:(GKAchievementInternal *)arg1;', '- (oneway void)scoreSelected:(GKScoreInternal *)arg1;', '- (oneway void)challengeCompleted:(GKChallengeInternal *)arg1;', '- (oneway void)challengeReceived:(GKChallengeInternal *)arg1;', '- (oneway void)completedChallengeSelected:(GKChallengeInternal *)arg1;', '- (oneway void)receivedChallengeSelected:(GKChallengeInternal *)arg1;', '- (oneway void)fetchTurnBasedData;', '- (oneway void)session:(GKGameSession *)arg1 didReceiveMessage:(NSString *)arg2 withData:(NSData *)arg3 fromPlayer:(GKCloudPlayer *)arg4;', '- (oneway void)session:(GKGameSession *)arg1 didReceiveData:(NSData *)arg2 fromPlayer:(GKCloudPlayer *)arg3;', '- (oneway void)session:(GKGameSession *)arg1 player:(GKCloudPlayer *)arg2 didSaveData:(NSData *)arg3;', '- (oneway void)session:(GKGameSession *)arg1 player:(GKCloudPlayer *)arg2 didChangeConnectionState:(long long)arg3;', '- (oneway void)session:(GKGameSession *)arg1 removedPlayer:(GKCloudPlayer *)arg2;', '- (oneway void)session:(GKGameSession *)arg1 addedPlayer:(GKCloudPlayer *)arg2;', '- (oneway void)didReceiveData:(NSData *)arg1 reliably:(_Bool)arg2 forRecipients:(NSArray *)arg3 fromSender:(NSString *)arg4;', '- (oneway void)didDisconnectFromParticipantWithID:(NSString *)arg1;', '- (oneway void)didConnectToParticipantWithID:(NSString *)arg1;', '- (oneway void)relayPushNotification:(NSDictionary *)arg1;', '- (oneway void)cancelGameInvite:(NSString *)arg1;', '- (oneway void)declineInviteWithNotification:(NSDictionary *)arg1;', '- (oneway void)acceptInviteWithNotification:(NSDictionary *)arg1;', '- (oneway void)acceptMultiplayerGameInvite;', '- (oneway void)respondedToNearbyInvite:(NSDictionary *)arg1;', '- (oneway void)friendRequestSelected:(GKFriendRequestInternal *)arg1;', '- (oneway void)completedOptimisticAuthenticationWithResponse:(GKAuthenticateResponse *)arg1 error:(NSError *)arg2;', '- (oneway void)authenticatedPlayersDidChange:(NSArray *)arg1 reply:(void (^)(void))arg2;', '- (oneway void)setCurrentGame:(GKGameInternal *)arg1 serverEnvironment:(long long)arg2 reply:(void (^)(void))arg3;', '- (oneway void)setPreferencesValues:(NSDictionary *)arg1;', '- (oneway void)resetNetworkActivity;', '- (oneway void)endNetworkActivity;', '- (oneway void)beginNetworkActivity;']}, 'mach-ports': ['com.apple.gamed', 'com.apple.gamed.note']}, '/usr/libexec/sharingd': {'protocols': {'SDConnectionManagerDelegate': ['- (void)connectionManagerDidInvalidate:(SDConnectionManager *)arg1;'], 'SDUnlockXPCSesssionDelegate': ['- (void)unlockSessionDidFinish:(SDUnlockXPCSession *)arg1;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'SDCompanionStreamDelegate': ['- (void)companionStreamClosedStreams:(SDCompanionStream *)arg1;', '- (void)continuationStream:(SDCompanionStream *)arg1 connectedToService:(SFCompanionService *)arg2 withFileHandle:(NSFileHandle *)arg3 acceptHandler:(void (^)(_Bool))arg4;'], 'SDXPCInterface': ['- (void)userNotificationPresent:(SFUserNotification *)arg1;', '- (void)pairTLSClient:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)sessionSendTLSEncryptedObject:(NSDictionary *)arg1;', '- (void)sessionSendResponse:(SFResponseMessage *)arg1;', '- (void)sessionSendRequest:(SFRequestMessage *)arg1;', '- (void)sessionSendFrameType:(unsigned char)arg1 data:(NSData *)arg2;', '- (void)sessionSendEvent:(SFEventMessage *)arg1;', '- (void)sessionReceivedTLSData:(NSData *)arg1 type:(unsigned char)arg2;', '- (void)sessionActivate:(SFSession *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)serviceSendTLSEncryptedObject:(NSDictionary *)arg1 toPeer:(NSUUID *)arg2;', '- (void)serviceSendResponse:(SFResponseMessage *)arg1;', '- (void)serviceSendRequest:(SFRequestMessage *)arg1;', '- (void)serviceSendFrameType:(unsigned char)arg1 data:(NSData *)arg2 peer:(NSUUID *)arg3;', '- (void)serviceSendEvent:(SFEventMessage *)arg1;', '- (void)servicePairTLSWithPeer:(NSUUID *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)serviceUpdate:(SFService *)arg1;', '- (void)serviceActivateTLSWithCompletion:(void (^)(NSError *))arg1;', '- (void)serviceActivate:(SFService *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)serviceReceivedTLSData:(NSData *)arg1 type:(unsigned char)arg2 peer:(NSUUID *)arg3;', '- (void)remoteInteractionSessionSetText:(NSString *)arg1;', '- (void)remoteInteractionSessionInsertText:(NSString *)arg1;', '- (void)remoteInteractionSessionDeleteTextBackward;', '- (void)remoteInteractionSessionCommitText;', '- (void)remoteInteractionSessionClearText;', '- (void)remoteInteractionSessionActivate:(SFRemoteInteractionSession *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)nfcTagReaderUIActivateWithEndpoint:(NSXPCListenerEndpoint *)arg1 params:(NSDictionary *)arg2 completion:(void (^)(NSError *))arg3;', '- (void)diagnosticUnlockTestServer;', '- (void)diagnosticUnlockTestClientWithDevice:(SFBLEDevice *)arg1;', '- (void)diagnosticShow:(NSString *)arg1 completion:(void (^)(NSString *))arg2;', '- (void)diagnosticMockStop:(void (^)(NSError *))arg1;', '- (void)diagnosticMockStart:(void (^)(NSError *))arg1;', '- (void)diagnosticMock:(NSString *)arg1 device:(SFBLEDevice *)arg2 completion:(void (^)(NSError *))arg3;', '- (void)diagnosticLogControl:(NSString *)arg1 completion:(void (^)(NSString *))arg2;', '- (void)diagnosticControl:(NSString *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)diagnosticBLEModeWithCompletion:(void (^)(NSError *))arg1;', '- (void)bluetoothUserInteraction;', '- (void)deviceDiscoveryFastScanCancel:(NSString *)arg1;', '- (void)deviceDiscoveryFastScanTrigger:(NSString *)arg1;', '- (void)deviceDiscoveryUpdate:(SFDeviceDiscovery *)arg1;', '- (void)deviceDiscoveryActivate:(SFDeviceDiscovery *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)coordinatedAlertsRequestFinish;', '- (void)coordinatedAlertsRequestStart:(SFCoordinatedAlertRequest *)arg1 completion:(void (^)(NSError *, _Bool, NSDictionary *))arg2;', '- (void)wifiPasswordSharingAvailabilityWithCompletion:(void (^)(unsigned int, NSError *))arg1;', '- (void)triggerHomeKitDeviceDetectedWithURL:(NSURL *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)showDevicePickerWithInfo:(NSDictionary *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setupDevice:(SFDevice *)arg1 homeIdentifier:(NSUUID *)arg2 completion:(void (^)(NSError *))arg3;', '- (void)retriggerProximitySetup:(void (^)(NSError *))arg1;', '- (void)retriggerProximityPairing:(void (^)(NSError *))arg1;', '- (void)reenableProxCardType:(unsigned char)arg1 completion:(void (^)(NSError *))arg2;', '- (void)preventExitForLocaleReason:(NSString *)arg1;', '- (void)openSetupURL:(NSURL *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)appleIDInfoWithCompletion:(void (^)(NSString *, NSData *, NSError *))arg1;', '- (void)activityStateWithCompletion:(void (^)(unsigned long long, NSError *))arg1;', '- (void)activateAssertionWithIdentifier:(NSString *)arg1;', '- (void)displayStringForContactIdentifier:(NSString *)arg1 deviceIdentifier:(NSUUID *)arg2 completion:(void (^)(NSString *, _Bool, NSError *))arg3;', '- (void)displayNameForEmailHash:(NSString *)arg1 phoneHash:(NSString *)arg2 completion:(void (^)(NSString *, NSError *))arg3;', '- (void)contactIDForEmailHash:(NSString *)arg1 phoneHash:(NSString *)arg2 completion:(void (^)(NSString *, NSError *))arg3;', '- (void)statusInfoWithCompletion:(void (^)(NSDictionary *, NSError *))arg1;', '- (void)requestWithInfo:(NSDictionary *)arg1 completion:(void (^)(NSString *, NSError *))arg2;', '- (void)myAccountWithCompletion:(void (^)(SFAppleIDAccount *, NSError *))arg1;', '- (void)appleIDListWithCompletion:(void (^)(NSArray *, NSError *))arg1;', '- (void)addAppleID:(NSString *)arg1 withCompletion:(void (^)(NSError *))arg2;', '- (void)accountForAppleID:(NSString *)arg1 withCompletion:(void (^)(SFAppleIDAccount *, NSError *))arg2;'], 'SDXPCDaemonProtocol': ['- (void)establishConnectionWithCompletionHandler:(void (^)(void))arg1;'], 'SDCompanionPublisherProtocol': ['- (void)manager:(SDStreamManager *)arg1 connectedToService:(SFCompanionService *)arg2 withFileHandle:(NSFileHandle *)arg3 acceptHandler:(void (^)(_Bool))arg4;', '- (void)publisher:(SDStreamManager *)arg1 companionStreamForService:(SFCompanionService *)arg2 streamHandler:(SDStreamHandler *)arg3;', '- (void)publisher:(SDStreamManager *)arg1 didConnectToService:(SFCompanionService *)arg2 withStreamHandler:(SDStreamHandler *)arg3;'], 'NSXPCConnectionDelegate': ['- (void)connection:(NSXPCConnection *)arg1 handleInvocation:(NSInvocation *)arg2 isReply:(_Bool)arg3;', '- (id <NSSecureCoding>)replacementObjectForXPCConnection:(NSXPCConnection *)arg1 encoder:(NSXPCCoder *)arg2 object:(id)arg3;'], 'SFCompanionXPCManagerProtocol': ['- (void)createHotspotSessionForClientProxy:(id <SFRemoteHotspotClient>)arg1 reply:(void (^)(id <SFRemoteHotspotProtocol>, NSError *))arg2;', '- (void)appleAccountSignedOut;', '- (void)appleAccountSignedIn;', '- (void)createUnlockManagerWithReply:(void (^)(id <SFUnlockProtocol>, NSError *))arg1;', '- (void)createContinuityScannerForClientProxy:(id <SFContinuityScannerClient>)arg1 reply:(void (^)(id <SFContinuityScannerProtocol>, NSError *))arg2;', '- (void)createActivityAdvertiserForClientProxy:(id <SFActivityAdvertiserClient>)arg1 reply:(void (^)(id <SFActivityAdvertiserProtocol>, NSError *))arg2;', '- (void)createStreamsForMessage:(NSDictionary *)arg1 reply:(void (^)(NSFileHandle *, NSError *))arg2;', '- (void)createCompanionServiceManagerWithIdentifier:(NSString *)arg1 clientProxy:(id <SFCompanionServiceManagerClient>)arg2 reply:(void (^)(id <SFCompanionServiceManagerProtocol>, NSString *, NSString *, NSString *, NSError *))arg3;']}, 'mach-ports': ['com.apple.sharingd', 'com.apple.sharingd.nsxpc']}, '/System/Library/Frameworks/Accounts.framework/accountsd': {'mach-ports': ['com.apple.accountsd.accountmanager', 'com.apple.accountsd.authmanager', 'com.apple.accountsd.oauthsigner']}, '/usr/libexec/backboardd': {'protocols': {'BKSAlternateSystemAppServerProtocol': ['- (void)unblockSystemAppForAlternateSystemApp;', '- (void)terminateAlternateSystemAppWithBundleID:(NSString *)arg1;', '- (void)openAlternateSystemAppWithBundleID:(NSString *)arg1;', '- (void)blockSystemAppForAlternateSystemApp;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'BKEventFocusManagerServerInterface': ['- (void)setObservesTouchDelivery:(_Bool)arg1 forTouchIdentifier:(unsigned int)arg2;', '- (void)setObservesFocusDeferralChanges:(_Bool)arg1;'], 'NSXPCConnectionDelegate': ['- (void)connection:(NSXPCConnection *)arg1 handleInvocation:(NSInvocation *)arg2 isReply:(_Bool)arg3;', '- (id <NSSecureCoding>)replacementObjectForXPCConnection:(NSXPCConnection *)arg1 encoder:(NSXPCCoder *)arg2 object:(id)arg3;'], 'BKSTouchDeliveryPolicyServerInterface': ['- (void)ipc_addPolicy:(BKSTouchDeliveryPolicy *)arg1;']}, 'mach-ports': ['PurpleSystemEventPort', 'com.apple.CARenderServer', 'com.apple.accessibility.AXBackBoardServer', 'com.apple.backboard.TouchDeliveryPolicyServer', 'com.apple.backboard.animation-fence-arbiter', 'com.apple.backboard.checkin', 'com.apple.backboard.display.services', 'com.apple.backboard.hid.services', 'com.apple.backboard.watchdog', 'com.apple.iohideventsystem', 'com.apple.uikit.GestureServer']}, '/System/Library/Frameworks/CFNetwork.framework/AuthBrokerAgent': {'mach-ports': ['com.apple.cfnetwork.AuthBrokerAgent']}, '/usr/libexec/nehelper': {'mach-ports': ['com.apple.nehelper']}, '/System/Library/PrivateFrameworks/CloudDocsDaemon.framework/bird': {'mach-ports': ['com.apple.bird', 'com.apple.bird.token']}, '/System/Library/PrivateFrameworks/QuickLookThumbnailing.framework/Support/com.apple.quicklook.ThumbnailsAgent': {'mach-ports': ['com.apple.quicklook.ThumbnailsAgent']}, '/System/Library/PrivateFrameworks/TelephonyUtilities.framework/callservicesd': {'mach-ports': ['com.apple.telephonyutilities.callservicesdaemon.callcapabilities', 'com.apple.telephonyutilities.callservicesdaemon.voip']}, '/usr/libexec/nsurlsessiond': {'protocols': {'NSURLSessionDelegateOptions_Internal': ['- (_Bool)_delegateOptions_clientImplementsCollectingMetrics;'], 'NSURLSessionTaskDelegatePrivate': ['- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 _conditionalRequirementsChanged:(_Bool)arg3;', '- (void)URLSession:(NSURLSession *)arg1 _taskIsWaitingForConnection:(NSURLSessionTask *)arg2;', '- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 _isWaitingForConnectionWithReason:(long long)arg3;', '- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 _isWaitingForConnectionWithError:(NSError *)arg3;', '- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 _willSendRequestForEstablishedConnection:(NSURLRequest *)arg3 completionHandler:(void (^)(NSURLRequest *))arg4;', '- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 _schemeUpgraded:(NSURLRequest *)arg3 completionHandler:(void (^)(NSURLRequest *))arg4;'], 'NDBackgroundSessionProtocol': ['- (void)avAggregateAssetDownloadTaskWithDownloadToken:(unsigned long long)arg1 serializedMediaSelections:(NSArray *)arg2 assetTitle:(NSString *)arg3 assetArtworkData:(NSData *)arg4 options:(NSDictionary *)arg5 childDownloadSessionIdentifier:(NSString *)arg6 identifier:(unsigned long long)arg7 uniqueIdentifier:(NSString *)arg8 reply:(void (^)(_Bool))arg9;', '- (void)avAssetDownloadTaskWithDownloadToken:(unsigned long long)arg1 URL:(NSURL *)arg2 destinationURL:(NSURL *)arg3 temporaryDestinationURL:(NSURL *)arg4 assetTitle:(NSString *)arg5 assetArtworkData:(NSData *)arg6 options:(NSDictionary *)arg7 identifier:(unsigned long long)arg8 uniqueIdentifier:(NSString *)arg9 reply:(void (^)(_Bool))arg10;', '- (void)setPropertyOnStreamWithIdentifier:(unsigned long long)arg1 propDict:(NSDictionary *)arg2 propKey:(NSString *)arg3 withReply:(void (^)(_Bool))arg4;', '- (void)invalidateWithReply:(void (^)(void))arg1;', '- (void)resetStorageWithReply:(void (^)(void))arg1;', '- (void)setBytesPerSecondLimit:(long long)arg1 forTaskWithIdentifier:(unsigned long long)arg2;', '- (void)setLoadingPoolPriority:(double)arg1 forTaskWithIdentifier:(unsigned long long)arg2;', '- (void)setPriority:(long long)arg1 forTaskWithIdentifier:(unsigned long long)arg2;', '- (void)setDescription:(NSString *)arg1 forTask:(unsigned long long)arg2;', '- (void)resumeTaskWithIdentifier:(unsigned long long)arg1 withProperties:(NSDictionary *)arg2;', '- (void)suspendTaskWithIdentifier:(unsigned long long)arg1;', '- (void)cancelTaskWithIdentifier:(unsigned long long)arg1 byProducingResumeData:(void (^)(NSData *))arg2;', '- (void)cancelTaskWithIdentifier:(unsigned long long)arg1;', '- (void)downloadTaskWithResumeData:(NSData *)arg1 identifier:(unsigned long long)arg2 uniqueIdentifier:(NSString *)arg3 reply:(void (^)(_Bool))arg4;', '- (void)dataTaskWithRequest:(NSURLRequest *)arg1 originalRequest:(NSURLRequest *)arg2 identifier:(unsigned long long)arg3 uniqueIdentifier:(NSString *)arg4 reply:(void (^)(_Bool))arg5;', '- (void)uploadTaskWithRequest:(NSURLRequest *)arg1 originalRequest:(NSURLRequest *)arg2 fromFile:(NSURL *)arg3 sandboxExtensionData:(NSData *)arg4 identifier:(unsigned long long)arg5 uniqueIdentifier:(NSString *)arg6 potentialCredentials:(NSDictionary *)arg7 reply:(void (^)(_Bool))arg8;', '- (void)downloadTaskWithRequest:(NSURLRequest *)arg1 originalRequest:(NSURLRequest *)arg2 downloadFilePath:(NSString *)arg3 identifier:(unsigned long long)arg4 uniqueIdentifier:(NSString *)arg5 reply:(void (^)(_Bool))arg6;'], 'NDCallbackQueueDelegate': ['- (NSString *)descriptionForTaskWithIdentifier:(unsigned long long)arg1;', '- (id <NSXPCProxyCreating><NDBackgroundSessionClient>)getClientProxy;', '- (void)clientAcknowledgedTerminalCallbackForTask:(unsigned long long)arg1;', '- (void)errorOccurredDuringAuthCallbackDelivery:(NSError *)arg1 completionHandler:(void (^)(long long, NSURLCredential *))arg2;', '- (void)errorOccurredDuringFinishedCallbackDelivery:(NSError *)arg1;', '- (void)wakeUpClient;'], 'NSURLSessionDownloadDelegate_Private': ['- (NSURL *)_URLSession:(NSURLSession *)arg1 downloadTaskNeedsDownloadDirectory:(NSURLSessionDownloadTask *)arg2;', '- (void)_URLSession:(NSURLSession *)arg1 downloadTask:(NSURLSessionDownloadTask *)arg2 didReceiveResponse:(NSURLResponse *)arg3;'], 'NDCredentialStorageDelegate': ['- (id <NSXPCProxyCreating><NDBackgroundSessionClient>)getClientProxy;'], 'NDApplicationObserver': ['- (void)applicationEndedExtendedNonDiscretionaryBackgroundGracePeriod:(NDApplication *)arg1;', '- (void)applicationEndedNonDiscretionaryBackgroundGracePeriod:(NDApplication *)arg1;', '- (void)applicationNoLongerInForeground:(NDApplication *)arg1;', '- (void)applicationEnteredForeground:(NDApplication *)arg1;', '- (void)applicationWasSuspended:(NDApplication *)arg1;', '- (void)backgroundUpdatesDisabledForApplication:(NDApplication *)arg1;', '- (void)applicationWasQuitFromAppSwitcher:(NDApplication *)arg1;'], 'NSURLSessionDelegate_Internal': ['- (void)_URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 getAuthHeadersForResponse:(NSURLResponse *)arg3 completionHandler:(void (^)(_Bool, NSDictionary *))arg4;', '- (void)_URLSession:(NSURLSession *)arg1 needConnectedSocketToHost:(NSString *)arg2 port:(unsigned long long)arg3 completionHandler:(void (^)(int, struct))arg4;', '- (void)_URLSession:(NSURLSession *)arg1 companionAvailabilityChanged:(_Bool)arg2;', '- (void)_URLSession:(NSURLSession *)arg1 openFileAtPath:(NSString *)arg2 mode:(int)arg3 completionHandler:(void (^)(int))arg4;'], 'NSURLSessionDownloadDelegate': ['- (void)URLSession:(NSURLSession *)arg1 downloadTask:(NSURLSessionDownloadTask *)arg2 didFinishDownloadingToURL:(NSURL *)arg3;', '- (void)URLSession:(NSURLSession *)arg1 downloadTask:(NSURLSessionDownloadTask *)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4;', '- (void)URLSession:(NSURLSession *)arg1 downloadTask:(NSURLSessionDownloadTask *)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5;'], 'NDBackgroundSessionDelegate': ['- (void)sessionCompleted:(NDBackgroundSession *)arg1 withCompletionHandler:(void (^)(void))arg2;'], 'NSURLSessionDataDelegate_Internal': ['- (void)_URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 didReceiveData:(NSData *)arg3 completionHandler:(void (^)(void))arg4;'], 'NDBackgroundSessionManagerProtocol': ['- (void)obliterateAllSessionsWithReply:(void (^)(void))arg1;', '- (void)getActiveSessionIdentifiersWithReply:(void (^)(NSArray *))arg1;', '- (void)okayToSendPendingCallbacksForIdentifier:(NSString *)arg1 reply:(void (^)(void))arg2;', '- (void)releaseAssertionForSession:(NSString *)arg1 reply:(void (^)(void))arg2;', '- (void)sendPendingCallbacksForIdentifier:(NSString *)arg1 reply:(void (^)(void))arg2;', '- (void)createSessionWithConfiguration:(NSURLSessionConfiguration *)arg1 clientProxy:(id <NDBackgroundSessionClient>)arg2 cachesDirectory:(NSURL *)arg3 options:(NSDictionary *)arg4 reply:(void (^)(id <NDBackgroundSessionProtocol>, NSDictionary *, _Bool))arg5;', '- (void)dropBoost;', '- (void)boost;']}, 'mach-ports': ['com.apple.nsurlsessiond']}, '/System/Library/Frameworks/AddressBook.framework/Support/ABDatabaseDoctor': {'mach-ports': ['com.apple.ABDatabaseDoctor']}, '/usr/libexec/symptomsd': {'mach-ports': ['com.apple.usymptomsd']}, '/System/Library/PrivateFrameworks/PassKitCore.framework/passd': {'mach-ports': ['com.apple.passd.assertions', 'com.apple.passd.in-app-payment', 'com.apple.passd.library']}, '/usr/libexec/assertiond': {'mach-ports': ['com.apple.assertiond.applicationstateconnection', 'com.apple.assertiond.expiration', 'com.apple.assertiond.processassertionconnection']}, '/usr/sbin/distnoted': {'mach-ports': ['com.apple.distributed_notifications@0v3', 'com.apple.distributed_notifications@1v3']}, '/usr/sbin/cfprefsd': {'mach-ports': ['com.apple.cfprefsd.daemon']}, '/usr/libexec/diagnosticd': {'mach-ports': ['com.apple.diagnosticd']}, '/System/Library/PrivateFrameworks/IMFoundation.framework/IMLoggingAgent': {'mach-ports': ['com.apple.marco']}, '/System/Library/PrivateFrameworks/AggregateDictionary.framework/Support/aggregated': {'mach-ports': ['com.apple.powerlog.plxpclogger.xpc']}, '/System/Library/Frameworks/HealthKit.framework/healthd': {'mach-ports': ['com.apple.healthd.server']}, '/usr/libexec/nesessionmanager': {'mach-ports': ['com.apple.nesessionmanager']}, '/System/Library/CoreServices/prdaily': {'mach-ports': ['com.apple.prdaily']}, '/usr/libexec/IOAccelMemoryInfoCollector': {'mach-ports': ['com.apple.gpumemd.source']}, '/System/Library/PrivateFrameworks/TCC.framework/tccd': {'mach-ports': ['com.apple.tccd']}, '/usr/libexec/MobileGestaltHelper': {'mach-ports': ['com.apple.mobilegestalt.xpc']}, '/System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/identityservicesd': {'protocols': {'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'IDSDGroupContextNotifyingObserverDelegate': ['- (void)didReceiveRegistrationIdentityUpdate;', '- (void)didReceiveDecryptionFailureForGroup:(ENGroup *)arg1;', '- (void)didUpdateGroup:(ENGroup *)arg1 withNewGroup:(ENGroup *)arg2;', '- (void)didCacheGroup:(ENGroup *)arg1;', '- (void)didCreateGroup:(ENGroup *)arg1;']}, 'mach-ports': ['com.apple.identityservicesd.idquery.embedded.auth']}, '/System/Library/PrivateFrameworks/ApplePushService.framework/apsd': {'mach-ports': ['com.apple.apsd']}, '/usr/libexec/nsurlstoraged': {'protocols': {'NetworkStorageXPCProtocol': ['- (void)performSchemaCheckAndUpdate;', '- (void)setMinSizeForVMCachedResource:(long long)arg1;', '- (void)currentDiskUsageWithCompletionHandler:(void (^)(long long))arg1;', '- (void)setMaxSize:(long long)arg1;', '- (void)copyAllPartitionNamesWithCompletionHandler:(void (^)(NSArray *))arg1;', '- (void)copyAllHostNamesForOptionalPartition:(NSString *)arg1 completionHandler:(void (^)(NSArray *))arg2;', '- (void)deleteAllHostNames:(NSArray *)arg1 forOptionalPartition:(NSString *)arg2;', '- (void)deleteResponsesSinceDate:(NSDate *)arg1;', '- (void)deleteAllResponses;', '- (void)deleteResponseForRequestWithKey:(NSString *)arg1 completionHandler:(void (^)(_Bool))arg2;', '- (void)addCachedResponseWithDictionary:(NSDictionary *)arg1 key:(NSString *)arg2;', '- (void)createStorageTaskManagerForPath:(NSString *)arg1 maxSize:(long long)arg2 extension:(NSData *)arg3;']}, 'mach-ports': ['com.apple.cookied', 'com.apple.nsurlstorage-cache']}, '/System/Library/PrivateFrameworks/CoreSymbolication.framework/coresymbolicationd': {'mach-ports': ['com.apple.coresymbolicationd']}, '/usr/libexec/locationd': {'protocols': {'CLRoutineMonitorServiceProtocol': ['- (void)stopMonitoringScenarioTriggerOfType:(unsigned long long)arg1 forClient:(byref id <CLRoutineMonitorClientProtocol>)arg2;', '- (void)startMonitoringScenarioTriggerOfType:(unsigned long long)arg1 forClient:(byref id <CLRoutineMonitorClientProtocol>)arg2;', '- (void)fetchLocationOfInterestAtLocation:(CLLocation *)arg1 withHandler:(void (^)(RTLocationOfInterest *, NSError *))arg2;', '- (void)stopLeechingLowConfidenceVisitsForClient:(byref id <CLRoutineMonitorClientProtocol>)arg1;', '- (void)startLeechingLowConfidenceVisitsForClient:(byref id <CLRoutineMonitorClientProtocol>)arg1;', '- (void)stopLeechingVisitsForClient:(byref id <CLRoutineMonitorClientProtocol>)arg1;', '- (void)startLeechingVisitsForClient:(byref id <CLRoutineMonitorClientProtocol>)arg1;', '- (void)stopMonitoringVisitsForClient:(byref id <CLRoutineMonitorClientProtocol>)arg1;', '- (void)startMonitoringVisitsForClient:(byref id <CLRoutineMonitorClientProtocol>)arg1;', '- (void)fetchPredictedLocationsOfInterestOnDate:(NSDate *)arg1 withReply:(void (^)(NSArray *, NSError *))arg2;', '- (void)fetchNextPredictedLocationsOfInterestFromLocation:(CLLocation *)arg1 startDate:(NSDate *)arg2 timeInterval:(double)arg3 withReply:(void (^)(NSArray *, NSError *))arg4;', '- (void)fetchRecentLocationsOfInterestWithReply:(void (^)(NSArray *, NSError *))arg1;', '- (void)fetchLocationsOfInterestOfType:(long long)arg1 withReply:(void (^)(NSArray *, NSError *))arg2;', '- (void)fetchLocationsOfInterestWithinDistance:(double)arg1 ofLocation:(CLLocation *)arg2 withReply:(void (^)(NSArray *, NSError *))arg3;', '- (void)fetchLocationsOfInterestAssociatedToIdentifier:(NSString *)arg1 withReply:(void (^)(NSArray *, NSError *))arg2;', '- (void)fetchRoutineModeFromLocation:(CLLocation *)arg1 withReply:(void (^)(long long, NSError *))arg2;'], 'CLLocationManagerRoutineServerInterface': ['- (void)stopUpdatingPredictedApplications;', '- (void)startUpdatingPredictedApplications;', '- (void)fetchPredictedApplicationsAtLocation:(CLLocation *)arg1 reply:(void (^)(NSArray *, NSError *))arg2;', '- (void)stopUpdatingLocation;', '- (void)startUpdatingLocation;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'NSFileManagerDelegate': ['- (_Bool)fileManager:(NSFileManager *)arg1 shouldProceedAfterError:(NSError *)arg2 removingItemAtURL:(NSURL *)arg3;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldProceedAfterError:(NSError *)arg2 removingItemAtPath:(NSString *)arg3;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldRemoveItemAtURL:(NSURL *)arg2;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldRemoveItemAtPath:(NSString *)arg2;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldProceedAfterError:(NSError *)arg2 linkingItemAtURL:(NSURL *)arg3 toURL:(NSURL *)arg4;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldProceedAfterError:(NSError *)arg2 linkingItemAtPath:(NSString *)arg3 toPath:(NSString *)arg4;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldLinkItemAtURL:(NSURL *)arg2 toURL:(NSURL *)arg3;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldLinkItemAtPath:(NSString *)arg2 toPath:(NSString *)arg3;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldProceedAfterError:(NSError *)arg2 movingItemAtURL:(NSURL *)arg3 toURL:(NSURL *)arg4;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldProceedAfterError:(NSError *)arg2 movingItemAtPath:(NSString *)arg3 toPath:(NSString *)arg4;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldMoveItemAtURL:(NSURL *)arg2 toURL:(NSURL *)arg3;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldMoveItemAtPath:(NSString *)arg2 toPath:(NSString *)arg3;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldProceedAfterError:(NSError *)arg2 copyingItemAtURL:(NSURL *)arg3 toURL:(NSURL *)arg4;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldProceedAfterError:(NSError *)arg2 copyingItemAtPath:(NSString *)arg3 toPath:(NSString *)arg4;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldCopyItemAtURL:(NSURL *)arg2 toURL:(NSURL *)arg3;', '- (_Bool)fileManager:(NSFileManager *)arg1 shouldCopyItemAtPath:(NSString *)arg2 toPath:(NSString *)arg3;'], 'CLLocationSmootherServerInterface': ['- (void)smoothLocations:(NSArray *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;', '- (void)smoothLocations:(NSArray *)arg1 useType:(NSNumber *)arg2;'], 'CLDiagnosticManagerServiceProtocol': ['- (void)unregisterFileForCollection:(NSURL *)arg1;', '- (void)registerFileForCollection:(NSURL *)arg1;'], 'CLSuggestedActionClientProtocol': ['- (void)onPredictedApplications:(NSArray *)arg1;'], 'CLIntersiloClientProtocol': [], 'CLSmootherMonitorServiceProtocol': []}, 'mach-ports': ['com.apple.locationd.registration', 'com.apple.locationd.spi', 'com.apple.locationd.synchronous']}, '/System/Library/PrivateFrameworks/IAPAuthentication.framework/Support/iapauthd': {'mach-ports': ['com.apple.iapauthd', 'com.apple.iapauthd.xpc']}, '/System/Library/PrivateFrameworks/CommunicationsFilter.framework/CMFSyncAgent.app/CMFSyncAgent': {'mach-ports': ['com.apple.cmfsyncagent.embedded.auth']}, '/usr/libexec/fseventsd': {'mach-ports': ['com.apple.FSEvents']}, '/System/Library/PrivateFrameworks/CloudKitDaemon.framework/Support/cloudd': {'mach-ports': ['com.apple.cloudd']}, '/usr/libexec/wapic': {'mach-ports': ['com.apple.wapi.client']}, '/System/Library/Frameworks/FileProvider.framework/Support/fileproviderd': {'protocols': {'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'APSConnectionDelegate': ['- (void)connection:(APSConnection *)arg1 didReceivePublicToken:(NSData *)arg2;', '- (void)connectionDidReconnect:(APSConnection *)arg1;', '- (void)connection:(APSConnection *)arg1 didChangeConnectedStatus:(_Bool)arg2;', '- (void)connection:(APSConnection *)arg1 didFailToSendOutgoingMessage:(APSOutgoingMessage *)arg2 error:(NSError *)arg3;', '- (void)connection:(APSConnection *)arg1 didSendOutgoingMessage:(APSOutgoingMessage *)arg2;', '- (void)connection:(APSConnection *)arg1 didReceiveMessageForTopic:(NSString *)arg2 userInfo:(NSDictionary *)arg3;', '- (void)connection:(APSConnection *)arg1 didReceiveIncomingMessage:(APSIncomingMessage *)arg2;', '- (void)connection:(APSConnection *)arg1 didReceiveToken:(NSData *)arg2 forTopic:(NSString *)arg3 identifier:(NSString *)arg4;'], 'PKFileProviderXPCServer': ['- (void)fileProviderUnregister;', '- (void)fileProviderRegister;'], 'FPDProcessMonitorDelegate': ['- (void)processMonitor:(FPDProcessMonitor *)arg1 didBecomeForeground:(_Bool)arg2;'], 'FPDDaemon': ['- (void)didUpdateAlternateContentsDocumentForDocumentAtURL:(NSURL *)arg1 completionHandler:(void (^)(NSError *))arg2;', '- (void)fetchAlternateContentsURLForDocumentURL:(NSURL *)arg1 completionHandler:(void (^)(NSURL *, NSError *))arg2;', '- (void)setAlternateContentsURL:(FPSandboxingURLWrapper *)arg1 onDocumentURL:(NSURL *)arg2 completionHandler:(void (^)(NSError *))arg3;', '- (void)setEnabled:(_Bool)arg1 forDomainIdentifier:(NSString *)arg2 providerIdentifier:(NSString *)arg3 completionHandler:(void (^)(NSError *))arg4;', '- (void)getDomainsForProviderIdentifier:(NSString *)arg1 completionHandler:(void (^)(NSArray *, NSError *))arg2;', '- (void)removeAllDomainsForProviderIdentifier:(NSString *)arg1 completionHandler:(void (^)(NSError *))arg2;', '- (void)removeDomain:(NSFileProviderDomain *)arg1 forProviderIdentifier:(NSString *)arg2 completionHandler:(void (^)(NSError *))arg3;', '- (void)addDomain:(NSFileProviderDomain *)arg1 forProviderIdentifier:(NSString *)arg2 completionHandler:(void (^)(NSError *))arg3;', '- (void)reindexAllSearchableItemsForBundleIDs:(NSArray *)arg1 acknowledgementHandler:(void (^)(void))arg2;', '- (void)reindexAllSearchableItemsWithAcknowledgementHandler:(void (^)(void))arg1;', '- (void)dumpStateTo:(NSFileHandle *)arg1 completionHandler:(void (^)(NSError *))arg2;', '- (void)fetchSupportedServicesForDocumentAtURL:(NSURL *)arg1 completionHandler:(void (^)(NSArray *, NSError *))arg2;', '- (void)updateLastUsedDate:(NSURL *)arg1 completionHandler:(void (^)(NSError *))arg2;', '- (void)trashItemAtURL:(NSURL *)arg1 completionHandler:(void (^)(NSURL *, NSError *))arg2;', '- (void)endpointForItemAtURL:(NSURL *)arg1 completionHandler:(void (^)(NSArray *, NSXPCListenerEndpoint *, NSError *))arg2;', '- (void)valuesForAttributes:(NSArray *)arg1 forItemAtURL:(NSURL *)arg2 completionHandler:(void (^)(NSDictionary *, NSError *))arg3;', '- (void)extendBookmarkForItemID:(FPItemID *)arg1 consumerID:(NSString *)arg2 completionHandler:(void (^)(NSString *, NSError *))arg3;', '- (void)itemForURL:(NSURL *)arg1 completionHandler:(void (^)(FPItem *, NSError *))arg2;', '- (void)fetchRemoteServiceEndpointCreatingProviderWithIdentifier:(NSString *)arg1 itemURL:(NSURL *)arg2 handler:(void (^)(id <FPDRemoteServiceEndpointCreatingProvider>, NSError *))arg3;', '- (void)fetchRemoteFileProviderWithIdentifier:(NSString *)arg1 handler:(void (^)(id <FPDRemoteFileProvider>, NSString *, NSError *))arg2;', '- (void)documentURLFromBookmarkableString:(NSString *)arg1 creatingPlaceholderIfMissing:(_Bool)arg2 ignoreAlternateContentsURL:(_Bool)arg3 completionHandler:(void (^)(FPSandboxingURLWrapper *, FPSandboxingURLWrapper *, NSError *))arg4;', '- (void)bookmarkableStringFromDocumentURL:(NSURL *)arg1 completionHandler:(void (^)(NSString *, NSError *))arg2;', '- (void)extendBookmarkForFileURL:(NSURL *)arg1 toConsumerID:(NSString *)arg2 completionHandler:(void (^)(NSString *, NSError *))arg3;', '- (void)providersCompletionHandler:(void (^)(NSError *, NSDictionary *))arg1;', '- (void)evictItemAtURL:(NSURL *)arg1 evenIfEnumeratingFP:(_Bool)arg2 andClearACLForConsumer:(NSString *)arg3 completionHandler:(void (^)(NSError *))arg4;', '- (void)startProvidingItemAtURL:(NSURL *)arg1 fromProviderID:(NSString *)arg2 forConsumerID:(NSString *)arg3 completionHandler:(void (^)(NSError *))arg4;', '- (void)extendSandboxForFileURL:(NSURL *)arg1 fromProviderID:(NSString *)arg2 toConsumerID:(NSString *)arg3 completionHandler:(void (^)(FPSandboxingURLWrapper *, NSError *))arg4;', '- (void)wakeUpCompletionHandler:(void (^)(NSError *))arg1;']}, 'mach-ports': ['com.apple.FileProvider']}, '/usr/libexec/trustd': {'mach-ports': ['com.apple.trustd']}, '/System/Library/CoreServices/SpringBoard.app/SpringBoard': {'protocols': {'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'SBCardItemsControllerRemoteInterface': ['- (void)getCardItemsForControllerWithIdentifier:(NSString *)arg1 withHandler:(void (^)(NSArray *, NSError *))arg2;', '- (void)setCardItems:(NSArray *)arg1 forControllerWithIdentifier:(NSString *)arg2;'], 'SBStatusBarStyleOverridesAssertionServer': ['- (void)setRegisteredOverrides:(NSNumber *)arg1 reply:(void (^)(NSError *))arg2;', '- (void)setStatusString:(NSString *)arg1 forAssertionWithIdentifier:(NSString *)arg2;', '- (void)deactivateStatusBarStyleOverridesAssertionsWithIdentifiers:(NSSet *)arg1;', '- (void)activateStatusBarStyleOverridesAssertions:(NSSet *)arg1 reply:(void (^)(NSDictionary *))arg2;']}, 'mach-ports': ['PurpleSystemAppPort', 'com.apple.SBUserNotification', 'com.apple.UIKit.KeyboardManagement', 'com.apple.UIKit.KeyboardManagement.hosted', 'com.apple.UIKit.statusbarserver', 'com.apple.frontboard.systemappservices', 'com.apple.frontboard.workspace', 'com.apple.notificationcenter.widgetcontrollerconnection', 'com.apple.pegasus', 'com.apple.springboard', 'com.apple.springboard.UIKit.migserver', 'com.apple.springboard.alerts', 'com.apple.springboard.backgroundappservices', 'com.apple.springboard.blockableservices', 'com.apple.springboard.icongeneration', 'com.apple.springboard.remotenotifications', 'com.apple.springboard.services', 'com.apple.springboard.watchdogserver']}, '/System/Library/Frameworks/CFNetwork.framework/CFNetworkAgent': {'mach-ports': ['com.apple.cfnetwork.cfnetworkagent']}, '/usr/libexec/lsd': {'mach-ports': ['com.apple.lsd.advertisingidentifiers', 'com.apple.lsd.mapdb', 'com.apple.lsd.open', 'com.apple.lsd.openurl']}, '/System/Library/PrivateFrameworks/HomeSharing.framework/Support/itunescloudd': {'protocols': {'CloudPushNotificationControllerDelegate': ['- (void)pushNotificationController:(CloudPushNotificationController *)arg1 didReceivePushForService:(int)arg2 message:(ICPushNotificationMessage *)arg3;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'SSAuthenticateRequestDelegate': ['- (void)authenticateRequest:(SSAuthenticateRequest *)arg1 didReceiveResponse:(SSAuthenticateResponse *)arg2;']}, 'mach-ports': ['com.apple.itunescloudd.xpc']}, '/System/Library/PrivateFrameworks/DataAccess.framework/Support/dataaccessd': {'mach-ports': ['com.apple.dataaccess.dataaccessd']}, '/usr/libexec/configd': {'mach-ports': ['com.apple.SystemConfiguration.DNSConfiguration', 'com.apple.SystemConfiguration.NetworkInformation', 'com.apple.SystemConfiguration.configd', 'com.apple.networking.captivenetworksupport']}, '/usr/libexec/mobileassetd': {'mach-ports': ['com.apple.mobileassetd']}, '/usr/libexec/atc': {'mach-ports': ['com.apple.atc']}, '/System/Library/PrivateFrameworks/CoreAccessories.framework/Support/accessoryd': {'protocols': {'ACCBLEPairingXPCServerProtocol': ['- (void)stopBLEUpdates:(NSString *)arg1 blePairingUUID:(NSData *)arg2;', '- (void)deviceUpdatePairingInfo:(NSString *)arg1 blePairingUUID:(NSData *)arg2 pairType:(unsigned char)arg3 pairInfo:(NSData *)arg4;', '- (void)devicePairingData:(NSString *)arg1 blePairingUUID:(NSData *)arg2 pairType:(unsigned char)arg3 pairData:(NSData *)arg4;', '- (void)deviceStateUpdate:(NSString *)arg1 blePairingUUID:(NSData *)arg2 bRadioOn:(_Bool)arg3 pairState:(int)arg4 bPairModeOn:(_Bool)arg5;', '- (void)startBLEUpdates:(NSString *)arg1 blePairingUUID:(NSData *)arg2 pairType:(unsigned char)arg3 bRadioUpdatesOn:(_Bool)arg4 bPairInfoUpdatesOn:(_Bool)arg5;', '- (void)initConnection:(void (^)(_Bool))arg1;'], 'ACCAssistiveTouchXPCServerProtocol': ['- (void)notifyEnabledState:(_Bool)arg1 provider:(NSString *)arg2;', '- (void)initConnection:(void (^)(_Bool))arg1;'], 'AccessoryHIDXPCServerProtocol': ['- (void)componentUpdate:(NSString *)arg1 componentID:(NSNumber *)arg2 enabled:(_Bool)arg3 withReply:(void (^)(_Bool))arg4;', '- (void)getReport:(NSString *)arg1 componentID:(NSNumber *)arg2 reportType:(NSNumber *)arg3 reportID:(NSNumber *)arg4 withReply:(void (^)(_Bool))arg5;', '- (void)outReport:(NSString *)arg1 componentID:(NSNumber *)arg2 report:(NSData *)arg3 withReply:(void (^)(_Bool))arg4;', '- (void)initConnection:(void (^)(_Bool))arg1;'], 'ACCMediaLibraryXPCServerProtocol': ['- (void)resetUpdate:(NSString *)arg1 accessory:(NSString *)arg2;', '- (void)update:(NSString *)arg1 revision:(NSString *)arg2 content:(NSDictionary *)arg3 accessory:(NSString *)arg4;', '- (void)update:(NSString *)arg1 updates:(NSArray *)arg2 accessory:(NSString *)arg3;', '- (void)notify:(NSString *)arg1 stateChange:(int)arg2 enabled:(_Bool)arg3;', '- (void)notifyAvailableLibraries:(NSArray *)arg1 provider:(NSString *)arg2;', '- (void)initConnection:(void (^)(_Bool))arg1;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'AccessoryNowPlayingXPCServerProtocol': ['- (void)playbackQueueListInfoResponse:(NSString *)arg1 requestID:(NSString *)arg2 info:(NSDictionary *)arg3;', '- (void)playbackQueueListChanged;', '- (void)playbackAttributesHaveChanged:(NSDictionary *)arg1 withReply:(void (^)(_Bool))arg2;', '- (void)mediaItemArtworkHasChanged:(NSData *)arg1 withReply:(void (^)(_Bool))arg2;', '- (void)mediaItemAttributesHaveChanged:(NSDictionary *)arg1 withReply:(void (^)(_Bool))arg2;', '- (void)initConnection:(void (^)(_Bool))arg1;'], 'AccessoryCameraXPCServerProtocol': ['- (void)captureStillImage:(NSString *)arg1 forCameraIds:(NSArray *)arg2 withReply:(void (^)(int))arg3;', '- (void)stopLivePreview:(NSString *)arg1 forCameraIds:(NSArray *)arg2 withReply:(void (^)(int))arg3;', '- (void)startLivePreview:(NSString *)arg1 forCameraIds:(NSArray *)arg2 withIndex:(unsigned short)arg3 withReply:(void (^)(int))arg4;', '- (void)setCameraProperties:(NSString *)arg1 forCameraId:(unsigned short)arg2 withProperties:(NSDictionary *)arg3 withReply:(void (^)(int))arg4;', '- (void)stopCameraUpdates:(NSString *)arg1 forCameraIds:(NSArray *)arg2 withReply:(void (^)(int))arg3;', '- (void)startCameraUpdates:(NSString *)arg1 forCameraIds:(NSArray *)arg2 withProperties:(NSDictionary *)arg3 withCapabilities:(NSDictionary *)arg4 withReply:(void (^)(int))arg5;', '- (void)stopCameraInfo:(NSString *)arg1 forCameraIds:(NSArray *)arg2 withReply:(void (^)(int))arg3;', '- (void)startCameraInfo:(NSString *)arg1 forCameraIds:(NSArray *)arg2 withReply:(void (^)(int))arg3;', '- (void)initConnection:(void (^)(_Bool))arg1;'], 'ACCVoiceOverXPCServerProtocol': ['- (void)update:(NSString *)arg1 cursorInfo:(NSDictionary *)arg2;', '- (void)update:(NSString *)arg1 info:(NSDictionary *)arg2;', '- (void)initConnection:(void (^)(_Bool))arg1;'], 'ACCAudioXPCServerProtocol': ['- (void)deviceAudioStatesWithReply:(void (^)(NSArray *))arg1;', '- (void)supportedDigitalAudioSampleRatesWithReply:(void (^)(NSArray *))arg1;', '- (void)supportedDigitalAudioSampleRate:(unsigned int)arg1 withReply:(void (^)(unsigned int))arg2;', '- (void)setDigitalAudioSampleRate:(unsigned int)arg1 withReply:(void (^)(_Bool))arg2;', '- (void)initConnectionToServer:(void (^)(_Bool))arg1;'], 'ACCNavigationXPCServerProtocol': ['- (void)notifyOfProvider:(NSString *)arg1;', '- (void)routeGuidance:(NSString *)arg1 laneGuidanceInfo:(NSDictionary *)arg2 componentIdList:(NSArray *)arg3;', '- (void)routeGuidance:(NSString *)arg1 maneuverUpdateInfo:(NSDictionary *)arg2 componentIdList:(NSArray *)arg3;', '- (void)routeGuidance:(NSString *)arg1 updateInfo:(NSDictionary *)arg2 componentIdList:(NSArray *)arg3;', '- (void)initConnection:(void (^)(_Bool))arg1;'], 'ACCCommunicationsXPCServerProtocol': ['- (void)commStatusDidChange:(NSDictionary *)arg1;', '- (void)callStateDidChange:(NSDictionary *)arg1;', '- (void)initConnection:(void (^)(_Bool))arg1;'], 'ACCOOBBTPairingXPCServerProtocol': ['- (void)requestLegacyConnectionIDForAccessoryUID:(NSString *)arg1;', '- (void)notifyOfProvider:(NSString *)arg1;', '- (void)linkKeyInfo:(NSString *)arg1 oobBtPairingUID:(NSString *)arg2 linkKey:(NSData *)arg3 deviceMacAddr:(NSData *)arg4;', '- (void)stopOOBBTPairing:(NSString *)arg1;', '- (void)startOOBBTPairing:(NSString *)arg1;', '- (void)initConnection:(void (^)(_Bool))arg1;']}, 'mach-ports': ['com.apple.iap2d.ExternalAccessory.distributednotification.server', 'com.apple.iap2d.distributednotification.server', 'com.apple.iap2d.xpc', 'com.apple.iaptransportd.xpc']}, '/System/Library/PrivateFrameworks/UserActivity.framework/Agents/useractivityd': {'protocols': {'UAUserActivityClientProtocol': ['- (void)doGetLoggingFileForClient:(NSString *)arg1 options:(NSDictionary *)arg2 completionHandler:(void (^)(NSFileHandle *, NSError *))arg3;', '- (void)doDetermineIfUserActivityIsCurrent:(NSUUID *)arg1 completionHandler:(void (^)(_Bool, NSString *, int, NSString *, NSError *))arg2;', '- (void)doGetCurrentUserActivityInfo:(void (^)(NSUUID *, NSString *, NSError *))arg1;', '- (void)doPinUserActivityInfo:(UAUserActivityInfo *)arg1 completionHandler:(void (^)(NSUUID *, NSError *))arg2;', '- (void)doMarkUserActivityAsDirty:(NSUUID *)arg1 forceImmediate:(_Bool)arg2 webpageURL:(NSURL *)arg3 expiration:(NSDate *)arg4 hasiCloudDocument:(_Bool)arg5 hasUnsynchronizediCloudDoc:(_Bool)arg6;', '- (void)doRemoveDynamicUserActivity:(NSString *)arg1 matching:(NSString *)arg2;', '- (void)doAddDynamicUserActivity:(NSString *)arg1 matching:(NSString *)arg2;', '- (void)doDeleteUserActivityWithUUID:(NSUUID *)arg1;', '- (void)doUpdateUserActivityWithUUID:(NSUUID *)arg1 setActive:(_Bool)arg2;', '- (void)doUpdateUserActivityInfo:(UAUserActivityInfo *)arg1 makeCurrent:(_Bool)arg2 completionHandler:(void (^)(NSError *))arg3;', '- (void)doFetchUserActivityInfoWithUUID:(NSUUID *)arg1 completionHandler:(void (^)(UAUserActivityInfo *, NSError *))arg2;', '- (void)doInitializeWithClientVersion:(long long)arg1 clientInfo:(NSDictionary *)arg2 completionHandler:(void (^)(long long, NSDictionary *, NSError *))arg3;'], 'SFCompanionAdvertiserDelegate': ['- (void)advertiser:(SFCompanionAdvertiser *)arg1 didReceiveInputStream:(NSInputStream *)arg2 outputStream:(NSOutputStream *)arg3;'], 'UAResumableActivitiesSysdiagnoseSupportProtocol': ['- (void)doCopyRecentActions:(NSDictionary *)arg1 completionHandler:(void (^)(NSArray *))arg2;', '- (void)doGetSysdiagnoseStringsIncludingPrivateData:(_Bool)arg1 completionHandler:(void (^)(NSArray *))arg2;', '- (void)doNOP:(NSString *)arg1 withCompletionHandler:(void (^)(NSString *, NSError *))arg2;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'UAUserActivityDebugLoggingProtocol': ['- (void)doGetLoggingFileForClient:(NSString *)arg1 options:(NSDictionary *)arg2 completionHandler:(void (^)(NSFileHandle *, NSError *))arg3;'], 'UABestAppSuggestionManagerProtocol': ['- (void)doLaunchFollowUp:(NSUUID *)arg1 interactionType:(unsigned long long)arg2 cancelled:(_Bool)arg3;', '- (void)doQueueFetchOfPayloadForBestAppSuggestion:(NSUUID *)arg1 completionHandler:(void (^)(NSError *))arg2;', '- (void)doUnregisterForBestAppChangeNotification;', '- (void)doRegisterForBestAppChangeNotification;', '- (void)doRemoveBestAppSuggestion:(NSUUID *)arg1 options:(NSDictionary *)arg2;', '- (void)doDetermineBestAppSuggestions:(long long)arg1 completionHandler:(void (^)(NSArray *, NSError *))arg2;', '- (void)doDetermineBestAppSuggestionWithCompletionHandler:(void (^)(NSUUID *, unsigned long long, NSString *, NSString *, NSDate *, double, NSString *, NSString *, NSString *))arg1;', '- (void)doStartBestAppSuggestion:(double)arg1;', '- (void)doConnected;'], 'UASharedPasteboardControllProtocol': ['- (void)startConnection:(int)arg1;'], 'UAResumableActivitiesAdministrativeProtocol': ['- (void)doGetSFActivityAdvertisement:(NSDictionary *)arg1 completionHandler:(void (^)(NSData *, NSDate *, NSUUID *, NSError *))arg2;', '- (void)doSetLocalPasteboardReflection:(_Bool)arg1;', '- (void)doSetRemotePasteboardAvalible:(_Bool)arg1;', '- (void)doReplayCommands:(NSArray *)arg1 completionHandler:(void (^)(_Bool, NSError *))arg2;', '- (void)getCurrentPeersAndClear:(_Bool)arg1 completionHandler:(void (^)(UAPingResults *))arg2;', '- (void)stopAdvertisingPing;', '- (void)startAdvertisingPingWithTimeInterval:(double)arg1;', '- (void)doSetupRendevous:(NSString *)arg1 domain:(NSString *)arg2 activate:(_Bool)arg3;', '- (void)doSetupNetworkedPairs:(NSString *)arg1 port:(long long)arg2;', '- (void)doBroadcastPing:(void (^)(UAPingResults *))arg1;', '- (void)doWillSaveDelegate:(NSUUID *)arg1 completionHandler:(void (^)(NSError *))arg2;', '- (void)doSetDefaults:(NSString *)arg1 value:(NSObject<NSSecureCoding> *)arg2;', '- (void)doCopyDefaults:(_Bool)arg1 completionHandler:(void (^)(NSDictionary *, NSError *))arg2;', '- (void)doCopySimulatorStatusString:(NSDictionary *)arg1 completionHandler:(void (^)(NSString *))arg2;', '- (void)doInjectBTLE:(NSUUID *)arg1 type:(unsigned long long)arg2 identifier:(NSString *)arg3 title:(NSString *)arg4 activityPayload:(NSData *)arg5 frameworkPayload:(NSData *)arg6 payloadDelay:(double)arg7;', '- (void)doGetCurrentAdvertisedItemUUID:(void (^)(NSUUID *))arg1;', '- (void)doTerminateServer;', '- (void)doCopyDynamicUserActivitiesString:(NSDictionary *)arg1 completionHandler:(void (^)(NSString *))arg2;', '- (void)doCopyStatusString:(NSString *)arg1 options:(NSDictionary *)arg2 completionHandler:(void (^)(NSString *))arg3;', '- (void)doCopyRecentActions:(NSDictionary *)arg1 completionHandler:(void (^)(NSArray *))arg2;', '- (void)doCopyDebuggingInfo:(NSDictionary *)arg1 completionHandler:(void (^)(NSDictionary *))arg2;', '- (void)doCopyEnabledUUIDsWithCompletionHandler:(void (^)(NSArray *))arg1;', '- (void)doCopyAllUUIDsOfType:(unsigned long long)arg1 withCompletionHandler:(void (^)(NSArray *))arg2;', '- (void)doCopyAdvertisedUUIDWithCompletionHandler:(void (^)(NSUUID *))arg1;', '- (void)doFindMatchingUserActivityForString:(NSString *)arg1 withCompletionHandler:(void (^)(NSUUID *))arg2;', '- (void)doSetDebugOption:(NSString *)arg1 value:(id)arg2;', '- (void)doNOP:(NSString *)arg1 withCompletionHandler:(void (^)(NSString *, NSError *))arg2;'], 'UASharedPasteboardManagerProtocol': ['- (void)setReturnPasteboardDataEarlyWithCompletion:(void (^)(_Bool))arg1;', '- (void)fetchRemotePasteboardForProcess:(int)arg1 withCompletion:(void (^)(UASharedPasteboardInfo *, NSError *))arg2;', '- (void)fetchRemotePasteboardTypesForProcess:(int)arg1 withCompletion:(void (^)(UASharedPasteboardInfo *, NSError *))arg2;', '- (void)localPasteboardTypesDidChange:(UASharedPasteboardInfo *)arg1 forGeneration:(unsigned long long)arg2;', '- (void)clearLocalPasteboardInformation;', '- (void)fetchRemotePasteboardStatus:(void (^)(_Bool))arg1;'], 'UASharedPasteboardAUXProtocol': ['- (void)setReturnPasteboardDataEarlyWithCompletion:(void (^)(_Bool))arg1;']}, 'mach-ports': ['com.apple.coreservices.lsuseractivitymanager.xpc']}, '/System/Library/PrivateFrameworks/MobileSoftwareUpdate.framework/Support/softwareupdated': {'mach-ports': ['com.apple.mobile.softwareupdated']}, '/usr/libexec/hangtracerd': {'mach-ports': ['com.apple.hangtracerd']}, '/System/Library/Frameworks/CoreTelephony.framework/Support/DMHelper': {'mach-ports': ['com.apple.commcenter.dm-helper']}, '/System/Library/PrivateFrameworks/ManagedConfiguration.framework/Support/profiled': {'protocols': {'MCXPCProtocol': ['- (void)mayShareToAirDropForOriginatingAppBundleID:(NSString *)arg1 originatingAccountIsManaged:(_Bool)arg2 completion:(void (^)(_Bool, NSError *))arg3;', '- (void)mayShareToMessagesForOriginatingAppBundleID:(NSString *)arg1 originatingAccountIsManaged:(_Bool)arg2 completion:(void (^)(_Bool, NSError *))arg3;', '- (void)cancelFeaturePromptWithIdentifier:(NSString *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)showFeaturePromptForSetting:(NSString *)arg1 configurationUUID:(NSString *)arg2 promptOptions:(NSDictionary *)arg3 promptIdentifier:(NSString *)arg4 completion:(void (^)(int, NSError *))arg5;', '- (void)shutDownWithCompletion:(void (^)(NSError *))arg1;', '- (void)validateAppBundleIDs:(NSArray *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setupAssistantDidFinishCompletion:(void (^)(NSError *))arg1;', '- (void)filteredMailAccountsWithSourceAccountManagement:(int)arg1 completion:(void (^)(NSArray *, NSError *))arg2;', '- (void)allowedKeyboardBundleIDsAfterApplyingFilterToBundleIDs:(NSArray *)arg1 hostAppBundleID:(NSString *)arg2 accountIsManaged:(_Bool)arg3 completion:(void (^)(NSArray *))arg4;', '- (void)unstashWhitelistURLStringsWithCompletion:(void (^)(NSError *))arg1;', '- (void)stashWhitelistURLStringsWithCompletion:(void (^)(NSError *))arg1;', '- (void)unstashBlacklistURLStringsWithCompletion:(void (^)(NSError *))arg1;', '- (void)stashBlacklistURLStringsWithCompletion:(void (^)(NSError *))arg1;', '- (void)removeWebContentFilterUserBlacklistedURLString:(NSString *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)unstashUserBookmarksFromLabel:(NSString *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)stashUserBookmarks:(NSArray *)arg1 withLabel:(NSString *)arg2 completion:(void (^)(NSError *))arg3;', '- (void)setUserBookmarks:(NSArray *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)storeActivationRecord:(NSDictionary *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)createActivationLockBypassCodeWithCompletion:(void (^)(NSString *, NSError *))arg1;', '- (void)cloudConfigurationStoreDetails:(NSDictionary *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)cloudConfigurationMachineInfoDataWithCompletion:(void (^)(NSData *, NSError *))arg1;', '- (void)rereadManagedAppAttributesWithCompletion:(void (^)(NSError *))arg1;', '- (void)markStoredProfileForPurposeAsInstalled:(int)arg1 completion:(void (^)(NSError *))arg2;', '- (void)profileDataStoredForPurpose:(int)arg1 completion:(void (^)(NSData *, NSError *))arg2;', '- (void)storeProfileData:(NSData *)arg1 configurationSource:(int)arg2 purpose:(int)arg3 completion:(void (^)(NSError *))arg4;', '- (void)removeExpiredProfilesWithCompletion:(void (^)(NSError *))arg1;', '- (void)managedAppIDsWithFlags:(int)arg1 completion:(void (^)(NSArray *, NSError *))arg2;', '- (void)setUserInfo:(NSDictionary *)arg1 forClientUUID:(NSString *)arg2 completion:(void (^)(NSError *))arg3;', '- (void)resetAllSettingsToDefaultsIsUserInitiated:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)recomputePerClientUserComplianceWithCompletion:(void (^)(NSError *))arg1;', '- (void)recomputeUserComplianceWarningWithCompletion:(void (^)(NSError *))arg1;', '- (void)notifyHaveSeenComplianceMessageWithLastLockDate:(NSDate *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)notifyStartComplianceTimer:(NSDate *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)removeProvisioningProfileWithUUID:(NSString *)arg1 completion:(void (^)(_Bool, NSError *))arg2;', '- (void)installProvisioningProfileData:(NSData *)arg1 managingProfileIdentifer:(NSString *)arg2 completion:(void (^)(NSError *))arg3;', '- (void)storeCertificateData:(NSData *)arg1 forIPCUIdentifier:(NSString *)arg2 completion:(void (^)(NSError *))arg3;', '- (void)openSensitiveURL:(NSString *)arg1 unlock:(_Bool)arg2 completion:(void (^)(NSError *))arg3;', '- (void)removeValueSetting:(NSString *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)removeBoolSetting:(NSString *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setParametersForSettingsByType:(NSDictionary *)arg1 configurationUUID:(NSString *)arg2 toSystem:(_Bool)arg3 user:(_Bool)arg4 passcode:(NSString *)arg5 credentialSet:(NSData *)arg6 completion:(void (^)(NSError *))arg7;', '- (void)migratePostMDMDataMigratorWithContext:(int)arg1 completion:(void (^)(NSError *))arg2;', '- (void)migrateWithContext:(int)arg1 passcodeWasSetInBackup:(_Bool)arg2 completion:(void (^)(NSError *))arg3;', '- (void)managedWiFiNetworkNamesWithCompletion:(void (^)(NSArray *, NSError *))arg1;', '- (void)managedSystemConfigurationServiceIDsWithCompletion:(void (^)(NSArray *, NSError *))arg1;', '- (void)removeOrphanedClientRestrictionsWithCompletion:(void (^)(NSError *))arg1;', '- (void)clearPasscodeWithEscrowKeybagData:(NSData *)arg1 secret:(NSData *)arg2 completion:(void (^)(NSError *))arg3;', '- (void)changePasscode:(NSString *)arg1 oldPasscode:(NSString *)arg2 completion:(void (^)(_Bool, NSError *))arg3;', '- (void)applyRestrictionDictionary:(NSDictionary *)arg1 appsAndOptions:(NSArray *)arg2 clientType:(NSString *)arg3 clientUUID:(NSString *)arg4 localizedClientDescription:(NSString *)arg5 localizedWarningMessage:(NSString *)arg6 completion:(void (^)(_Bool, _Bool, NSError *))arg7;', '- (void)removeProtectedProfileWithIdentifier:(NSString *)arg1 installationType:(long long)arg2 completion:(void (^)(NSError *))arg3;', '- (void)removeProfileWithIdentifier:(NSString *)arg1 installationType:(long long)arg2 completion:(void (^)(NSError *))arg3;', '- (void)updateProfileIdentifier:(NSString *)arg1 interactive:(_Bool)arg2 completion:(void (^)(NSString *, NSError *))arg3;', '- (void)popProvisioningProfileFromHeadOfInstallationQueueWithCompletion:(void (^)(NSData *, NSError *))arg1;', '- (void)popProfileDataFromHeadOfInstallationQueueWithCompletion:(void (^)(NSData *, NSError *))arg1;', '- (void)queueProfileDataForInstallation:(NSData *)arg1 originalFileName:(NSString *)arg2 originatingBundleID:(NSString *)arg3 transitionToUI:(_Bool)arg4 completion:(void (^)(NSString *, NSError *))arg5;', '- (void)installProfileData:(NSData *)arg1 interactive:(_Bool)arg2 options:(NSDictionary *)arg3 completion:(void (^)(NSString *, NSError *))arg4;', '- (void)isProfileInstalledWithIdentifier:(NSString *)arg1 completion:(void (^)(NSError *, _Bool))arg2;', '- (void)defaultAppBundleIDForCommunicationServiceType:(NSString *)arg1 forAccountWithIdentifier:(NSString *)arg2 completion:(void (^)(NSString *, NSError *))arg3;', '- (void)notifyDeviceUnlockedWithCompletion:(void (^)(NSError *))arg1;', '- (void)waitForMigrationIncludingPostRestoreMigration:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)addBookmark:(NSDictionary *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)addAllowedURLString:(NSString *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setAllowedURLStrings:(NSArray *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setDictationAllowed:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setSpellCheckAllowed:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setKeyboardShortcutsAllowed:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setPredictiveKeyboardAllowed:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setSmartPunctuationAllowed:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)setAutoCorrectionAllowed:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)allowedImportFromAppBundleIDs:(NSArray *)arg1 importingAppBundleID:(NSString *)arg2 importingIsManaged:(_Bool)arg3 completion:(void (^)(NSArray *, NSError *))arg4;', '- (void)allowedOpenInAppBundleIDs:(NSArray *)arg1 originatingAppBundleID:(NSString *)arg2 originatingIsManaged:(_Bool)arg3 completion:(void (^)(NSArray *, NSError *))arg4;', '- (void)checkCarrierProfileAndForceReinstallation:(_Bool)arg1 completion:(void (^)(NSError *))arg2;', '- (void)checkInWithCompletion:(void (^)(NSError *))arg1;']}, 'mach-ports': ['com.apple.managedconfiguration.profiled.public']}, '/usr/sbin/syslogd': {'mach-ports': ['com.apple.system.logger']}, '/usr/libexec/replayd': {'protocols': {'RPRecordingSessionDelegate': ['- (void)broadcastSession:(RPRecordingSession *)arg1 didUpdateDuration:(double)arg2;', '- (void)broadcastSession:(RPRecordingSession *)arg1 didUpdateServiceInfo:(NSDictionary *)arg2;', '- (void)recordingSession:(RPRecordingSession *)arg1 stoppedWithError:(NSError *)arg2;'], 'MCProfileConnectionObserver': ['- (void)profileConnectionDidReceiveAppWhitelistChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;', '- (void)profileConnectionDidReceiveDefaultsChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;', '- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;', '- (void)profileConnectionDidReceiveProfileListChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;', '- (void)profileConnectionDidReceivePasscodePolicyChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;', '- (void)profileConnectionDidReceivePasscodeChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;', '- (void)profileConnectionDidReceiveRestrictionChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'RPBroadcastDaemonProtocol': ['- (void)finishBroadcastWithError:(NSError *)arg1;', '- (void)updateBroadcastURL:(NSURL *)arg1;', '- (void)updateServiceInfo:(NSDictionary *)arg1;', '- (void)ping;'], 'RPStatusBarAssertionDelegate': ['- (void)timerDidUpdate:(NSString *)arg1;'], 'RPBroadcastExtensionProtocol': ['- (void)processPayload:(NSDictionary *)arg1 completion:(void (^)(void))arg2;'], 'RPClientProtocol': ['- (oneway void)recordingTimerDidUpdate:(NSString *)arg1;', '- (oneway void)recordingLockInterrupted:(NSError *)arg1;', '- (oneway void)captureHandlerWithAudioSample:(NSData *)arg1 absdData:(NSData *)arg2 itemCount:(long long)arg3 bufferType:(long long)arg4 timingData:(NSData *)arg5;', '- (oneway void)captureHandlerWithSample:(RPIOSurfaceObject *)arg1 timingData:(NSData *)arg2;', '- (oneway void)updateBroadcastURL:(NSURL *)arg1;', '- (oneway void)updateBroadcastServiceInfo:(NSDictionary *)arg1;', '- (oneway void)stopRecordingWithError:(NSError *)arg1 movieURL:(NSURL *)arg2;', '- (oneway void)updateScreenRecordingState:(_Bool)arg1;'], 'FBSDisplayLayoutObserver': ['- (void)layoutMonitor:(FBSDisplayLayoutMonitor *)arg1 didUpdateDisplayLayout:(FBSDisplayLayout *)arg2 withContext:(FBSDisplayLayoutTransitionContext *)arg3;', '- (void)layoutMonitor:(FBSDisplayLayoutMonitor *)arg1 didUpdateDisplayLayout:(FBSDisplayLayout *)arg2;'], 'CXCallObserverDelegate': ['- (void)callObserver:(CXCallObserver *)arg1 callChanged:(CXCall *)arg2;'], 'SBSStatusBarStyleOverridesCoordinatorDelegate': ['- (void)statusBarCoordinator:(SBSStatusBarStyleOverridesCoordinator *)arg1 invalidatedRegistrationWithError:(NSError *)arg2;', '- (_Bool)statusBarCoordinator:(SBSStatusBarStyleOverridesCoordinator *)arg1 receivedTapWithContext:(id <SBSStatusBarTapContext>)arg2 completionBlock:(void (^)(void))arg3;'], 'RPDaemonProtocol': ['- (oneway void)reportCameraUsage:(int)arg1;', '- (oneway void)setMicrophoneEnabledPersistent:(_Bool)arg1;', '- (oneway void)setBroadcastURL:(NSString *)arg1;', '- (oneway void)setHasUserConsentForMicrophone:(_Bool)arg1;', '- (oneway void)setHasUserConsentForCamera:(_Bool)arg1;', '- (oneway void)synchronousGetCurrentState:(void (^)(NSDictionary *))arg1;', '- (oneway void)clientDidResignActive;', '- (oneway void)clientDidBecomeActive;', '- (oneway void)discardRecordingWithHandler:(void (^)(void))arg1;', '- (oneway void)updateProcessIDForAudioCaptureWithPID:(int)arg1;', '- (oneway void)setMicrophoneEnabled:(_Bool)arg1;', '- (oneway void)resumeRecordingWithWindowLayerContextID:(unsigned int)arg1;', '- (oneway void)pauseRecording;', '- (oneway void)saveVideoToCameraRoll:(NSURL *)arg1 handler:(void (^)(NSError *))arg2;', '- (oneway void)stopRecordingWithStartClipDuration:(double)arg1 endClipDuration:(double)arg2 handler:(void (^)(NSURL *, NSError *))arg3;', '- (oneway void)stopRecordingWithHandler:(void (^)(NSURL *, NSError *))arg1;', '- (oneway void)getSystemBroadcastExtensionInfo:(void (^)(NSArray *, NSError *))arg1;', '- (oneway void)getCurrentBroadcastImages:(void (^)(UIImage *, UIImage *))arg1;', '- (oneway void)setupBroadcastWithHostBundleID:(NSString *)arg1 broadcastExtensionBundleID:(NSString *)arg2 broadcastConfigurationData:(NSData *)arg3 userInfo:(NSDictionary *)arg4 handler:(void (^)(NSError *))arg5;', '- (oneway void)startRecordingWindowLayerContextIDs:(NSArray *)arg1 windowSize:(struct CGSize)arg2 microphoneEnabled:(_Bool)arg3 cameraEnabled:(_Bool)arg4 broadcast:(_Bool)arg5 systemRecording:(_Bool)arg6 captureEnabled:(_Bool)arg7 listenerEndpoint:(NSXPCListenerEndpoint *)arg8 withHandler:(void (^)(NSError *, _Bool, _Bool))arg9;'], 'BBRemoteDataProvider': []}, 'mach-ports': ['com.apple.replayd']}, '/System/Library/PrivateFrameworks/iTunesStore.framework/Support/itunesstored': {'protocols': {'pjRPsXEyBJiXQnH9': ['- (void)getScoreMessageWithIdentifier:(NSString *)arg1 nonce:(NSData *)arg2 completion:(void (^)(NSData *, NSError *))arg3;', '- (void)computeScoresUsingSettings:(VD9LmqazgfzMqjuy *)arg1 completion:(void (^)(NSString *, NSData *, NSError *))arg2;'], 'UMUserSwitchStakeholder': ['- (void)willSwitchUser;']}, 'mach-ports': ['com.apple.iTunesStore.daemon.notifications.public', 'com.apple.iTunesStore.daemon.public', 'com.apple.itunesstored.xpc']}, '/usr/libexec/nanoregistryd': {'protocols': {'CBPairingAgentDelegate': ['- (void)pairingAgent:(CBPairingAgent *)arg1 peerDidRequestPairing:(CBPeer *)arg2 type:(long long)arg3 passkey:(NSNumber *)arg4;', '- (void)pairingAgent:(CBPairingAgent *)arg1 peerDidUnpair:(CBPeer *)arg2;', '- (void)pairingAgent:(CBPairingAgent *)arg1 peerDidFailToCompletePairing:(CBPeer *)arg2 error:(NSError *)arg3;', '- (void)pairingAgent:(CBPairingAgent *)arg1 peerDidCompletePairing:(CBPeer *)arg2;'], 'NRRemoteObjectCloudDelegate': ['- (void)remoteObject:(NRRemoteObjectCloud *)arg1 receivedMigratedAwayWithAdvertisedName:(NSString *)arg2;', '- (void)remoteObject:(NRRemoteObjectCloud *)arg1 receivedMigrationRequestWithShouldCancel:(_Bool)arg2 responseBlock:(void (^)(int))arg3;'], 'NRRecoveryStep': ['- (double)start:(id <NRRecoveryManagerStepDelegate>)arg1;', '- (id)migrateWithDictionary:(NSDictionary *)arg1;', '- (void)invalidate;', '- (void)timeoutHandler;'], 'NRRegistryProxyDelegate': ['- (void)startRecovery;', '- (void)_unpairWithDeviceID:(id)arg1 shouldObliterate:(_Bool)arg2 shouldBrick:(_Bool)arg3 shouldPreserveESim:(_Bool)arg4 caller:(NSString *)arg5 operationHasBegun:(void (^)(NSError *))arg6;', '- (void)xpcSwitchActiveDeviceWithDeviceID:(NSUUID *)arg1 requestorPID:(int)arg2 withAssertionHandler:(void (^)(NSError *, NSString *))arg3;', '- (NRSecureDevicePropertyStore *)secureProperties;', '- (_Bool)isSecureDataAvailable;', '- (void)xpcGetDeviceCollectionWithNoEntitlementBlock:(void (^)(NRMutableDeviceCollection *, unsigned long long))arg1;', '- (void)xpcGetDiffSinceIndex:(unsigned long long)arg1 withNoEntitlementBlock:(void (^)(NRDeviceCollectionDiff *, _Bool, unsigned long long))arg2;', '- (void)handleDeadPairingClientWithName:(NSString *)arg1;', '- (void)abortPairing;'], 'NRRemoteObjectClassADelegate': [], 'CBScalablePipeManagerDelegate': ['- (void)scalablePipeManager:(CBScalablePipeManager *)arg1 pipeDidDisconnect:(CBScalablePipe *)arg2 error:(NSError *)arg3;', '- (void)scalablePipeManager:(CBScalablePipeManager *)arg1 pipeDidConnect:(CBScalablePipe *)arg2;', '- (void)scalablePipeManager:(CBScalablePipeManager *)arg1 didUnregisterEndpoint:(NSString *)arg2;', '- (void)scalablePipeManager:(CBScalablePipeManager *)arg1 didRegisterEndpoint:(NSString *)arg2 error:(NSError *)arg3;', '- (void)scalablePipeManagerDidUpdateState:(CBScalablePipeManager *)arg1;'], 'EPNanoRegistryStatusCodeElectionDelegate': ['- (void)statusCodeManager:(EPNanoRegistryStatusCodeElection *)arg1 electionOutcomeChanged:(unsigned long long)arg2;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'NanoRegistryPrivateDaemonDelegate': ['- (void)xpcKeepPhoneUnlockedInternalTestSPI:(void (^)(void))arg1;', '- (void)xpcGetLastMigrationRequestPhoneNameWithCompletion:(void (^)(NSString *))arg1;', '- (void)xpcBeginMigrationWithDeviceID:(NSUUID *)arg1 passcode:(NSString *)arg2 withBlock:(void (^)(void))arg3;', '- (void)xpcSetMigrationConsented:(_Bool)arg1 forDeviceID:(NSUUID *)arg2 withBlock:(void (^)(void))arg3;', '- (void)xpcIsKeychainEnabledWithBlock:(void (^)(_Bool))arg1;', '- (void)xpcIsWatchSetupPushActiveWithBlock:(void (^)(_Bool))arg1;', '- (void)xpcStopWatchSetupPushWithBlock:(void (^)(void))arg1;', '- (void)xpcStartWatchSetupPushWithBlock:(void (^)(void))arg1;', '- (void)xpcApplyDiff:(NRDeviceCollectionDiff *)arg1 block:(void (^)(void))arg2;', '- (void)xpcPingActiveGizmoWithPriority:(long long)arg1 withMessageSize:(unsigned long long)arg2 withBlock:(void (^)(_Bool, double, double))arg3;', '- (void)xpcSubmitServerRequestReportWithRequestType:(NSString *)arg1 duration:(double)arg2 errorCode:(unsigned int)arg3 block:(void (^)(void))arg4;'], 'NRStateMachineDelegate': ['- (void)unpairNRDeviceWithDeviceID:(NSUUID *)arg1;', '- (NSUUID *)pairedPairingIDForBluetoothID:(NSUUID *)arg1;', '- (void)setPairingID:(NSUUID *)arg1 forBluetoothID:(NSUUID *)arg2;', '- (NSUUID *)updateNRMutableDeviceFromEPDevice:(EPDevice *)arg1 withNRUUID:(NSUUID *)arg2;', '- (void)deleteUnexpectedIDSPairedDevices;', '- (_Bool)shouldCollectPairingPerfStackshots;', '- (void)connectIDSDuringPairing;', '- (NSUUID *)createDeviceFromCompanionOOBPairingRequest:(NSString *)arg1;', '- (void)processEvent:(NSString *)arg1;', '- (void)pushVersion4CompatibilityMessageIfNeeded;', '- (void)activateDevice:(NSUUID *)arg1;', '- (_Bool)isInternalInstall;', '- (_Bool)hasRecoverySteps;', '- (void)setRedisplayRunBridgeDialogTimer;', '- (void)clearRedisplayRunBridgeAlertTimer;', '- (_Bool)isDeviceUnlocked;', '- (void)clearPairingAgentDelegate;', '- (void)setPairingAgentDelegate;', '- (long long)minPairingCompatibilityVersion;', '- (long long)maxPairingCompatibilityVersion;', '- (void)updateLastUnpairReason:(unsigned long long)arg1;', '- (NSString *)_pathToNanoRegistryStateDirectory;', '- (void)startRecovery;', '- (NRRecoveryManager *)sharedRecoveryManager;', '- (void)sendXPCBTPairRequestMessage:(NSUUID *)arg1;', '- (void)requestGizmoTransitionToCompatibilityState:(unsigned short)arg1;', '- (void)displayRunBridgeDialog;', '- (void)displayUpdateCompanionDialog;', '- (void)deleteAccounts;', '- (CBPeer *)getPairedPeer:(NSUUID *)arg1;', '- (NSUUID *)getBluetoothIDForPairingID:(NSUUID *)arg1;', '- (CBPeer *)getPeerForPairingID:(NSUUID *)arg1;', '- (void)unpairBluetoothDevicesWithPeers:(NSArray *)arg1 andQueue:(NSObject<OS_dispatch_queue> *)arg2 andCompletion:(void (^)(_Bool))arg3;', '- (void)getBluetoothPairedPeersWithQueue:(NSObject<OS_dispatch_queue> *)arg1 andCompletion:(void (^)(_Bool, NSArray *))arg2;', '- (void)sendXPCOOBKeyChanged:(NSData *)arg1;', '- (NSData *)getOOBKey;', '- (void)beginDiscoveryWithDeviceToDiscover:(NSUUID *)arg1;', '- (NSString *)getAdvertisedNameFromDevice:(NSUUID *)arg1;', '- (void)logStateMachineTimeout:(NSString *)arg1 withReason:(NSString *)arg2;', '- (void)restartStateMachineTimeout:(NSString *)arg1;', '- (void)clearStateMachineTimeout:(NSString *)arg1;', '- (void)createStateMachineTimeout:(NSString *)arg1 withDuration:(double)arg2;', '- (void)resumeStateMachineTimeout:(NSString *)arg1;', '- (void)suspendStateMachineTimeout:(NSString *)arg1;', '- (void)clearStateMachineTimeouts;', '- (void)IDSLocalPairingSetupCompletedWithBlock:(void (^)(_Bool))arg1;', '- (void)IDSLocalPairingConnectDeviceWithBlock:(void (^)(_Bool))arg1;', '- (void)IDSAddPairedDevice:(NSUUID *)arg1 withBlock:(void (^)(_Bool))arg2;', '- (void)setOOBPairingEnabled:(_Bool)arg1;', '- (_Bool)isBluetoothPaired:(NSUUID *)arg1;', '- (void)notifyStateChanged;', '- (_Bool)isIDSPaired:(NSUUID *)arg1;', '- (void)setIsPaired:(_Bool)arg1 withPairingID:(NSUUID *)arg2;', '- (void)deleteLocalPairingStore:(NSUUID *)arg1;', '- (_Bool)createLocalPairingStore:(NSUUID *)arg1 andNotifyPairingBeginning:(_Bool)arg2;', '- (void)enableDaemons;', '- (void)refreshPropertyCache;', '- (void)sendXPCDeviceNeedsPasscodeMessage:(NSUUID *)arg1 passcode:(NSNumber *)arg2;', '- (void)failBluetoothPairingRequest:(NSUUID *)arg1;', '- (void)respondToBluetoothPasscodePairingRequest:(NSUUID *)arg1 key:(NSNumber *)arg2;', '- (void)respondToBluetoothOOBPairingRequest:(NSUUID *)arg1 key:(NSData *)arg2;', '- (void)cancelCompanionBluetoothPairingRequest:(NSUUID *)arg1;', '- (void)sendCompanionBluetoothPairingRequest:(NSUUID *)arg1;', '- (void)forceEndDiscovery;', '- (void)forceEndAdvertising;'], 'NSSecureCoding': ['+ (_Bool)supportsSecureCoding;'], 'NRRemoteObjectDelegate': [], 'EPUpdateLastUnpairReason': ['- (void)updateLastUnpairReason:(unsigned long long)arg1;'], 'NRKeychainSyncStatusManagerObserver': ['- (void)keychainSyncStatusDidChange:(_Bool)arg1;'], 'NRPairedSyncAdvisorObserver': ['- (void)pairedSyncAdvisorSyncCompleted:(NRPairedSyncAdvisor *)arg1;', '- (void)pairedSyncAdvisorNeedsSync:(NRPairedSyncAdvisor *)arg1 isInitialSync:(_Bool)arg2;'], 'NRRemoteObjectClassDDelegate': ['- (long long)minPairingCompatibilityVersion;', '- (long long)maxPairingCompatibilityVersion;', '- (void)remoteObject:(NRRemoteObjectClassD *)arg1 receivedUnpairRequestWithAdvertisedName:(NSString *)arg2 shouldObliterate:(_Bool)arg3 shouldBrick:(_Bool)arg4 shouldPreserveESim:(_Bool)arg5 withPairingFailureCode:(NSNumber *)arg6 withAbortReason:(NSString *)arg7 withRequestIdentifier:(id)arg8 fromIDSBTUUID:(NSUUID *)arg9;', '- (void)remoteObjectReceivedWatchMigrationCompletion:(unsigned long long)arg1;', '- (void)receivedPingRequestOfType:(int)arg1;'], 'NRPrivateProxyDelegate': [], 'EPSetServiceDisconnection': ['- (void)setServiceDisconnectionWithBool:(_Bool)arg1;'], 'NRPairedDeviceRegistryXPCDaemonDelegate': ['- (void)xpcPutMigrationChallengeCharacteristicWriteData:(NSData *)arg1 completion:(void (^)(_Bool))arg2;', '- (void)xpcGetMigrationPairingCharacteristicReadDataWithCompletion:(void (^)(NSData *))arg1;', '- (void)xpcClientInfo:(void (^)(NSArray *))arg1;', '- (void)xpcDeviceIDAtSwitchIndex:(unsigned int)arg1 withBlock:(void (^)(NSUUID *, NSDate *))arg2;', '- (void)xpcSwitchIndex:(void (^)(unsigned int))arg1;', '- (void)xpcGetChangeHistoryWithBlock:(void (^)(NRDeviceCollectionHistory *))arg1;', '- (void)xpcRetrieveSecureProperties:(NSSet *)arg1 block:(void (^)(NSDictionary *))arg2;', '- (void)xpcBeginMigrationWithDeviceID:(NSUUID *)arg1 completion:(void (^)(NSError *))arg2;', '- (void)xpcActiveDeviceAssertions:(void (^)(NSUUID *, NSArray *))arg1;', '- (void)xpcInvalidateSwitchAssertionWithIdentifier:(NSString *)arg1;', '- (void)xpcSwitchActiveDeviceWithDeviceID:(NSUUID *)arg1 withAssertionHandler:(void (^)(NSError *, NSString *))arg2;', '- (void)xpcSwitchActiveDeviceWithDeviceID:(NSUUID *)arg1 isMagicSwitch:(_Bool)arg2 operationHasCompleted:(void (^)(NSError *))arg3;', '- (void)xpcPairingClientDidEnterPhase:(NSString *)arg1 withBlock:(void (^)(void))arg2;', '- (void)xpcSubmitAlbertPairingReport:(void (^)(void))arg1;', '- (void)xpcTriggerVersion4Workaround;', '- (void)xpcRetriggerUnpairInfoDialogWithBlock:(void (^)(void))arg1;', '- (void)xpcQSRecoveryMigration:(NSUUID *)arg1 block:(void (^)(void))arg2;', '- (void)xpcAddRemoveRecoveryStepIDSFinalizeQS:(_Bool)arg1 withPairedBTDeviceID:(NSUUID *)arg2 block:(void (^)(void))arg3;', '- (void)xpcAddRemoveRecoveryStepIDSFinalize:(_Bool)arg1 block:(void (^)(void))arg2;', '- (void)xpcAddRemoveRecoveryStepObliterate:(_Bool)arg1 withStatePath:(NSString *)arg2 block:(void (^)(void))arg3;', '- (void)xpcAddRemoveRecoveryStepResetNVRAM:(_Bool)arg1 block:(void (^)(void))arg2;', '- (void)xpcAddRemoveRecoveryStepICloudDeletePaymentCards:(_Bool)arg1 block:(void (^)(void))arg2;', '- (void)xpcAddRemoveRecoveryStepStockholmReset:(_Bool)arg1 block:(void (^)(void))arg2;', '- (void)xpcAddRemoveRecoveryStepIDSUnpair:(_Bool)arg1 withPairingDeviceID:(NSUUID *)arg2 block:(void (^)(void))arg3;', '- (void)xpcAddRemoveRecoveryStepUnpairBluetooth:(_Bool)arg1 withPairingDeviceID:(NSUUID *)arg2 block:(void (^)(void))arg3;', '- (void)xpcAddRemoveRecoveryStepDeletePairingStore:(_Bool)arg1 withPairingDeviceID:(NSUUID *)arg2 block:(void (^)(void))arg3;', '- (void)xpcAddRemoveRecoveryStepRemoteUnpair:(_Bool)arg1 withAdvertisedName:(NSString *)arg2 andPairedDeviceID:(NSUUID *)arg3 block:(void (^)(void))arg4;', '- (void)xpcAddRemoveRecoveryStepIDSUnpairStartQS:(_Bool)arg1 withPairedBTDeviceID:(NSUUID *)arg2 block:(void (^)(void))arg3;', '- (void)xpcAddRemoveRecoveryStepIDSUnpairStart:(_Bool)arg1 block:(void (^)(void))arg2;', '- (void)xpcAddRemoveRecoveryStepDeleteAccounts:(_Bool)arg1 block:(void (^)(void))arg2;', '- (void)xpcAddRemoveRecoveryStepBackup:(_Bool)arg1 withPairingDeviceID:(NSUUID *)arg2 block:(void (^)(void))arg3;', '- (void)xpcAddRemoveRecoveryStepDisableDaemons:(_Bool)arg1 block:(void (^)(void))arg2;', '- (void)xpcSetObliterationEnabled:(_Bool)arg1 block:(void (^)(void))arg2;', '- (void)xpcTriggerRecovery:(void (^)(void))arg1;', '- (void)xpcRecoveryDescription:(void (^)(NSString *))arg1;', '- (void)xpcResumePairingClientCrashMonitoring:(void (^)(void))arg1;', '- (void)xpcSuspendPairingClientCrashMonitoring:(void (^)(void))arg1;', '- (void)xpcPairingShouldContinue;', '- (void)xpcUnpairWithDeviceID:(NSUUID *)arg1 withOptions:(NSDictionary *)arg2 operationHasBegun:(void (^)(NSError *))arg3;', '- (void)xpcNotifyPasscode:(NSNumber *)arg1 withDeviceID:(NSUUID *)arg2;', '- (void)xpcNotifyActivationCompleted:(NSUUID *)arg1 withSuccess:(_Bool)arg2;', '- (void)xpcEnterCompatibilityState:(unsigned short)arg1 withDeviceID:(NSUUID *)arg2;', '- (void)xpcAbortPairingReason:(NSString *)arg1 withBlock:(void (^)(void))arg2;', '- (void)xpcGizmoPasscodeAdvertiseAndPairWithName:(NSString *)arg1 operationHasBegun:(void (^)(NSError *))arg2;', '- (void)xpcGizmoOOBAdvertiseAndPairWithName:(NSString *)arg1 operationHasBegun:(void (^)(NSError *))arg2;', '- (void)xpcCompanionPasscodePairWithDeviceID:(NSUUID *)arg1 withOptions:(NSDictionary *)arg2 operationHasBegun:(void (^)(NSError *))arg3;', '- (void)xpcCompanionOOBDiscoverAndPairWithName:(NSString *)arg1 withOutOfBandPairingKey:(NSData *)arg2 withOptions:(NSDictionary *)arg3 operationHasBegun:(void (^)(NSError *))arg4;', '- (void)xpcOverrideSignalStrengthLimit:(long long)arg1 block:(void (^)(void))arg2;', '- (void)xpcEndDiscoveryWithBlock:(void (^)(void))arg1;', '- (void)xpcBeginDiscoveryWithBlock:(void (^)(void))arg1;', '- (void)xpcGetDiffSinceIndex:(unsigned long long)arg1 withBlock:(void (^)(NRDeviceCollectionDiff *, _Bool, unsigned long long, _Bool, _Bool))arg2;', '- (void)xpcGetDeviceCollectionWithBlock:(void (^)(NRMutableDeviceCollection *, unsigned long long, _Bool, NRSecureDevicePropertyStore *))arg1;'], 'EPResourceOwnerDelegate': ['- (void)resourceAvailabilityDidChange:(id <EPResourceProtocol>)arg1;'], 'NRActiveDeviceAssertionManagerObserver': ['- (void)activeDeviceAssertionManagerChangedState;'], 'NRRemoteObjectClassCDelegate': ['- (void)remoteObject:(NRRemoteObjectClassC *)arg1 receivedPropertyRequestWithRequestIdentifier:(id)arg2 fromIDSBTUUID:(NSUUID *)arg3;', '- (void)remoteObject:(NRRemoteObjectClassC *)arg1 receivedPropertyChanges:(NSDictionary *)arg2 isAllProperties:(_Bool)arg3 fromIDSBTUUID:(NSUUID *)arg4;'], 'NRSwitchProgressTrackerObserver': ['- (void)switchProgressTracker:(NRSwitchProgressTracker *)arg1 didAbortSwitch:(NSUUID *)arg2;', '- (void)switchProgressTracker:(NRSwitchProgressTracker *)arg1 didFinishSwitch:(NSUUID *)arg2;', '- (void)switchProgressTracker:(NRSwitchProgressTracker *)arg1 didChangeProgressTo:(unsigned long long)arg2 forSwitchID:(NSUUID *)arg3;', '- (void)switchProgressTracker:(NRSwitchProgressTracker *)arg1 didStartSwitch:(NSUUID *)arg2;'], 'NRXPCProxyDelegate': ['- (void)xpcProxyLostConnection:(NRXPCProxy *)arg1;'], 'NRRecoveryManagerDelegate': ['- (void)recoveryManager:(NRRecoveryManager *)arg1 activeStateDidChange:(_Bool)arg2;', '- (void)recoveryManagerDidEndRecovery:(NRRecoveryManager *)arg1;', '- (void)recoveryManagerDidBeginRecovery:(NRRecoveryManager *)arg1;'], 'NRCreateUnpairTriggerFile': ['- (_Bool)unpairTriggerFileDoesNotExist;', '- (void)createUnpairTriggerFile:(_Bool)arg1;'], 'CBCentralManagerDelegate': ['- (void)centralManagerDidUpdateState:(CBCentralManager *)arg1;', '- (void)centralManager:(CBCentralManager *)arg1 didDisconnectPeripheral:(CBPeripheral *)arg2 error:(NSError *)arg3;', '- (void)centralManager:(CBCentralManager *)arg1 didFailToConnectPeripheral:(CBPeripheral *)arg2 error:(NSError *)arg3;', '- (void)centralManager:(CBCentralManager *)arg1 didConnectPeripheral:(CBPeripheral *)arg2;', '- (void)centralManager:(CBCentralManager *)arg1 didDiscoverPeripheral:(CBPeripheral *)arg2 advertisementData:(NSDictionary *)arg3 RSSI:(NSNumber *)arg4;', '- (void)centralManager:(CBCentralManager *)arg1 willRestoreState:(NSDictionary *)arg2;'], 'NRLocalPropertyMonitorObserver': ['- (void)localMonitor:(NRLocalPropertyMonitor *)arg1 propertiesDidChange:(NSDictionary *)arg2 thisIsAllOfThem:(_Bool)arg3;']}, 'mach-ports': ['com.apple.nano.nanoregistry.paireddeviceregistry']}, '/System/Library/PrivateFrameworks/AppSupport.framework/Support/cplogd': {'mach-ports': ['com.apple.appsupport.cplogd']}, '/usr/libexec/securityd': {'protocols': {'CKKSControlProtocol': ['- (void)rpcForceUploadAnalyticsWithReply:(void (^)(_Bool, NSError *))arg1;', '- (void)rpcGetAnalyticsJSONWithReply:(void (^)(NSData *, NSError *))arg1;', '- (void)rpcGetAnalyticsSysdiagnoseWithReply:(void (^)(NSString *, NSError *))arg1;', '- (void)rpcPushOutgoingChanges:(NSString *)arg1 reply:(void (^)(NSError *))arg2;', '- (void)rpcFetchAndProcessClassAChanges:(NSString *)arg1 reply:(void (^)(NSError *))arg2;', '- (void)rpcFetchAndProcessChanges:(NSString *)arg1 reply:(void (^)(NSError *))arg2;', '- (void)rpcStatus:(NSString *)arg1 reply:(void (^)(NSArray *, NSError *))arg2;', '- (void)rpcResync:(NSString *)arg1 reply:(void (^)(NSError *))arg2;', '- (void)rpcResetCloudKit:(NSString *)arg1 reply:(void (^)(NSError *))arg2;', '- (void)rpcResetLocal:(NSString *)arg1 reply:(void (^)(NSError *))arg2;', '- (void)performanceCounters:(void (^)(NSDictionary *))arg1;'], 'NSXPCListenerDelegate': ['- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;'], 'SOSControlProtocol': ['- (void)setWatchdogParmeters:(NSDictionary *)arg1 complete:(void (^)(NSError *))arg2;', '- (void)getWatchdogParameters:(void (^)(NSDictionary *, NSError *))arg1;', '- (void)triggerSync:(NSArray *)arg1 complete:(void (^)(_Bool, NSError *))arg2;', '- (void)importInitialSyncCredentials:(NSArray *)arg1 complete:(void (^)(_Bool, NSError *))arg2;', '- (void)initialSyncCredentials:(unsigned int)arg1 complete:(void (^)(NSArray *, NSError *))arg2;', '- (void)joinCircleWithBlob:(NSData *)arg1 version:(int)arg2 complete:(void (^)(_Bool, NSError *))arg3;', '- (void)circleJoiningBlob:(NSData *)arg1 complete:(void (^)(NSData *, NSError *))arg2;', '- (void)myPeerInfo:(void (^)(NSData *, NSError *))arg1;', '- (void)stashAccountCredential:(NSData *)arg1 complete:(void (^)(_Bool, NSError *))arg2;', '- (void)validatedStashedAccountCredential:(void (^)(NSData *, NSError *))arg1;', '- (void)assertStashedAccountCredential:(void (^)(_Bool, NSError *))arg1;', '- (void)stashedCredentialPublicKey:(void (^)(NSData *, NSError *))arg1;', '- (void)rateLimitingPerformanceCounters:(void (^)(NSDictionary *))arg1;', '- (void)idsPerformanceCounters:(void (^)(NSDictionary *))arg1;', '- (void)kvsPerformanceCounters:(void (^)(NSDictionary *))arg1;', '- (void)userPublicKey:(void (^)(_Bool, NSData *, NSError *))arg1;']}, 'mach-ports': ['com.apple.securityd']}}
